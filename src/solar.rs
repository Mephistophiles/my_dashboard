//! # Solar Module
//!
//! –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π.
//! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ª–æ–≤–∏–π –∞—Å—Ç—Ä–æ—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
//!
//! ## –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
//!
//! - [`SolarWindData`] - –î–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–º –≤–µ—Ç—Ä–µ
//! - [`GeomagneticData`] - –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//! - [`AuroraForecast`] - –ü—Ä–æ–≥–Ω–æ–∑ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π
//!
//! ## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
//!
//! ```rust,no_run
//! use my_dashboard::solar::predict_aurora;
//!
//! #[tokio::main]
//! async fn main() -> Result<(), Box<dyn std::error::Error>> {
//!     // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π
//!     let forecast = predict_aurora().await?;
//!     println!("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π: {:.1}%",
//!         forecast.visibility_probability * 100.0);
//!     println!("–°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞: {} –∫–º/—Å", forecast.solar_wind.speed);
//!     println!("Kp –∏–Ω–¥–µ–∫—Å: {}", forecast.geomagnetic.kp_index);
//!
//!     Ok(())
//! }
//! ```

use crate::{get_current_utc_time, is_demo_mode};
use anyhow::Result;
use chrono::{DateTime, Utc};
use log::debug;
use serde::{Deserialize, Serialize};

/// –î–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–º –≤–µ—Ç—Ä–µ
///
/// –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞,
/// –ø–æ–ª—É—á–µ–Ω–Ω—É—é –æ—Ç NOAA SWEPAM API.
#[derive(Debug, Serialize, Deserialize)]
pub struct SolarWindData {
    /// –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞ –≤ –∫–º/—Å
    pub speed: f64,
    /// –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —á–∞—Å—Ç–∏—Ü –≤ —á–∞—Å—Ç–∏—Ü/—Å–º¬≥
    pub density: f64,
    /// –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö
    pub temperature: f64,
    /// –ú–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ –≤ –Ω–¢–ª (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ SWEPAM API)
    pub magnetic_field: Option<f64>,
    /// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    pub timestamp: DateTime<Utc>,
}

/// –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
///
/// –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ Kp –∏–Ω–¥–µ–∫—Å–µ,
/// –ø–æ–ª—É—á–µ–Ω–Ω—É—é –æ—Ç NOAA Planetary K-index API.
#[derive(Debug, Serialize, Deserialize)]
pub struct GeomagneticData {
    /// –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–π Kp –∏–Ω–¥–µ–∫—Å (0-9)
    pub kp_index: f64,
    /// –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π (0-10)
    pub aurora_activity: f64,
    /// –°–æ–ª–Ω–µ—á–Ω–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ Kp API)
    pub solar_radiation: Option<f64>,
    /// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    pub timestamp: DateTime<Utc>,
}

/// –ü—Ä–æ–≥–Ω–æ–∑ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π
///
/// –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π,
/// —É—Ä–æ–≤–Ω–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ª—É—á—à–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.
#[derive(Debug)]
pub struct AuroraForecast {
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ª–Ω–µ—á–Ω–æ–º –≤–µ—Ç—Ä–µ
    pub solar_wind: SolarWindData,
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    pub geomagnetic: GeomagneticData,
    /// –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π (0-1)
    pub visibility_probability: f64,
    /// –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ)
    pub intensity_level: String,
    /// –õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (0-23)
    pub best_viewing_hours: Vec<usize>,
    /// –£—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    pub conditions: String,
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ NOAA API
#[derive(Debug, Serialize, Deserialize)]
struct SwepamRecord {
    #[serde(rename = "time_tag")]
    time_tag: String,
    #[serde(rename = "dsflag")]
    dsflag: i32,
    #[serde(rename = "dens")]
    dens: Option<f64>,
    #[serde(rename = "speed")]
    speed: Option<f64>,
    #[serde(rename = "temperature")]
    temperature: Option<f64>,
}

#[derive(Debug, Serialize, Deserialize)]
struct KpRecord {
    #[serde(rename = "time_tag")]
    time_tag: String,
    #[serde(rename = "kp_index")]
    kp_index: f64,
}

/// –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–º –≤–µ—Ç—Ä–µ –æ—Ç NOAA SWEPAM API
async fn fetch_solar_wind_data() -> Result<SolarWindData> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º DEMO —Ä–µ–∂–∏–º
    let demo_mode = is_demo_mode();

    if demo_mode {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è DEMO —Ä–µ–∂–∏–º–∞
        return Ok(SolarWindData {
            speed: 719.3,
            density: 4.1,
            temperature: 490479.0,
            magnetic_field: None,
            timestamp: get_current_utc_time(),
        });
    }

    debug!("üåû API –ó–ê–ü–†–û–°: NOAA SWEPAM API (—Å–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä)");
    let url = "https://services.swpc.noaa.gov/json/ace/swepam/ace_swepam_1h.json";
    let response = reqwest::get(url).await?;

    if !response.status().is_success() {
        return Err(anyhow::anyhow!(
            "HTTP {}: {}",
            response.status(),
            response.text().await?
        ));
    }

    let text = response.text().await?;

    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    let all_records: Vec<SwepamRecord> = match serde_json::from_str::<Vec<SwepamRecord>>(&text) {
        Ok(records) => records,
        Err(e) => {
            return Err(anyhow::anyhow!("Failed to parse solar wind JSON: {}", e));
        }
    };

    if all_records.is_empty() {
        return Err(anyhow::anyhow!("No solar wind data available"));
    }

    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    let start_idx = if all_records.len() > 50 {
        all_records.len() - 50
    } else {
        0
    };
    let records = &all_records[start_idx..];

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    let latest_record = records
        .iter()
        .find(|r| r.dsflag == 0 && r.dens.is_some() && r.speed.is_some() && r.temperature.is_some())
        .ok_or_else(|| anyhow::anyhow!("No valid solar wind data found"))?;

    let timestamp =
        match chrono::NaiveDateTime::parse_from_str(&latest_record.time_tag, "%Y-%m-%dT%H:%M:%S") {
            Ok(dt) => dt.and_utc(),
            Err(e) => {
                return Err(anyhow::anyhow!(
                    "Failed to parse timestamp '{}': {}",
                    latest_record.time_tag,
                    e
                ));
            }
        };

    Ok(SolarWindData {
        speed: latest_record.speed.unwrap(),
        density: latest_record.dens.unwrap(),
        temperature: latest_record.temperature.unwrap(),
        magnetic_field: None, // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–Ω–∏—Ç–Ω–æ–º –ø–æ–ª–µ –≤ SWEPAM
        timestamp,
    })
}

async fn fetch_geomagnetic_data() -> Result<GeomagneticData> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º DEMO —Ä–µ–∂–∏–º
    let demo_mode = is_demo_mode();

    if demo_mode {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è DEMO —Ä–µ–∂–∏–º–∞
        return Ok(GeomagneticData {
            kp_index: 0.0,
            aurora_activity: 0.0,
            solar_radiation: None,
            timestamp: get_current_utc_time(),
        });
    }

    debug!("üåç API –ó–ê–ü–†–û–°: NOAA Planetary K-index API (–≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)");
    let url = "https://services.swpc.noaa.gov/json/planetary_k_index_1m.json";
    let response = reqwest::get(url).await?;

    if !response.status().is_success() {
        return Err(anyhow::anyhow!(
            "HTTP {}: {}",
            response.status(),
            response.text().await?
        ));
    }

    let text = response.text().await?;

    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    let all_records: Vec<KpRecord> = match serde_json::from_str::<Vec<KpRecord>>(&text) {
        Ok(records) => records,
        Err(e) => {
            return Err(anyhow::anyhow!("Failed to parse geomagnetic JSON: {}", e));
        }
    };

    if all_records.is_empty() {
        return Err(anyhow::anyhow!("No geomagnetic data available"));
    }

    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    let start_idx = if all_records.len() > 50 {
        all_records.len() - 50
    } else {
        0
    };
    let records = &all_records[start_idx..];

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    let latest_record = &records[records.len() - 1];

    let timestamp =
        match chrono::NaiveDateTime::parse_from_str(&latest_record.time_tag, "%Y-%m-%dT%H:%M:%S") {
            Ok(dt) => dt.and_utc(),
            Err(e) => {
                return Err(anyhow::anyhow!(
                    "Failed to parse timestamp '{}': {}",
                    latest_record.time_tag,
                    e
                ));
            }
        };

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ Kp –∏–Ω–¥–µ–∫—Å–∞
    let aurora_activity = if latest_record.kp_index >= 5.0 {
        8.0 + (latest_record.kp_index - 5.0) * 0.4
    } else if latest_record.kp_index >= 3.0 {
        4.0 + (latest_record.kp_index - 3.0) * 2.0
    } else {
        latest_record.kp_index * 1.33
    }
    .min(10.0);

    Ok(GeomagneticData {
        kp_index: latest_record.kp_index,
        aurora_activity,
        solar_radiation: None, // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Ä–∞–¥–∏–∞—Ü–∏–∏
        timestamp,
    })
}

fn calculate_aurora_activity(solar_wind: &SolarWindData, geomagnetic: &GeomagneticData) -> f64 {
    let mut activity = 0.0;

    // –í–ª–∏—è–Ω–∏–µ Kp –∏–Ω–¥–µ–∫—Å–∞ (0-9)
    activity += (geomagnetic.kp_index / 9.0).min(1.0) * 6.0;

    // –í–ª–∏—è–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞
    if solar_wind.speed > 600.0 {
        activity += 2.0;
    } else if solar_wind.speed > 400.0 {
        activity += 1.0;
    }

    // –í–ª–∏—è–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞
    if solar_wind.density > 10.0 {
        activity += 2.0;
    } else if solar_wind.density > 5.0 {
        activity += 1.0;
    }

    activity.min(10.0)
}

pub async fn predict_aurora() -> Result<AuroraForecast> {
    let solar_wind = fetch_solar_wind_data().await?;
    let geomagnetic = fetch_geomagnetic_data().await?;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculate_aurora_activity –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    let activity = calculate_aurora_activity(&solar_wind, &geomagnetic);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (0-10) –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (0-1)
    let probability = (activity / 10.0_f64).min(1.0);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    let intensity_level = if probability > 0.8 {
        "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
    } else if probability > 0.6 {
        "–í—ã—Å–æ–∫–∞—è"
    } else if probability > 0.4 {
        "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
    } else if probability > 0.2 {
        "–ù–∏–∑–∫–∞—è"
    } else {
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è"
    }
    .to_string();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏—è
    let conditions = if probability > 0.6 {
        "–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π"
    } else if probability > 0.4 {
        "–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è, –≤–æ–∑–º–æ–∂–Ω—ã —Å–∏—è–Ω–∏—è"
    } else if probability > 0.2 {
        "–£–º–µ—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, —Å–∏—è–Ω–∏—è –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã"
    } else {
        "–ü–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å–∏—è–Ω–∏–π"
    }
    .to_string();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–Ω–æ—á–Ω—ã–µ —á–∞—Å—ã)
    let best_hours = vec![22, 23, 0, 1, 2, 3, 4, 5];

    Ok(AuroraForecast {
        solar_wind,
        geomagnetic,
        visibility_probability: probability,
        intensity_level,
        best_viewing_hours: best_hours,
        conditions,
    })
}

#[cfg(test)]
mod tests {
    use super::*;
    use pretty_assertions::assert_eq;

    #[test]
    fn test_aurora_activity_edge_cases() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        let solar_wind = SolarWindData {
            speed: 0.0,
            density: 0.0,
            temperature: 0.0,
            magnetic_field: None,
            timestamp: get_current_utc_time(),
        };

        let geomagnetic = GeomagneticData {
            kp_index: 0.0,
            aurora_activity: 0.0,
            solar_radiation: None,
            timestamp: get_current_utc_time(),
        };

        let activity = calculate_aurora_activity(&solar_wind, &geomagnetic);
        assert_eq!(activity, 0.0);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        let solar_wind_max = SolarWindData {
            speed: 1000.0,
            density: 20.0,
            temperature: 500000.0,
            magnetic_field: None,
            timestamp: get_current_utc_time(),
        };

        let geomagnetic_max = GeomagneticData {
            kp_index: 9.0,
            aurora_activity: 10.0,
            solar_radiation: None,
            timestamp: get_current_utc_time(),
        };

        let activity_max = calculate_aurora_activity(&solar_wind_max, &geomagnetic_max);
        assert_eq!(activity_max, 10.0);
    }

    #[test]
    fn test_aurora_activity_calculation_formula() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let solar_wind = SolarWindData {
            speed: 600.0,  // –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            density: 10.0, // –í—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
            temperature: 250000.0,
            magnetic_field: None,
            timestamp: get_current_utc_time(),
        };

        let geomagnetic = GeomagneticData {
            kp_index: 5.0, // –°—Ä–µ–¥–Ω–∏–π Kp –∏–Ω–¥–µ–∫—Å
            aurora_activity: 6.0,
            solar_radiation: None,
            timestamp: get_current_utc_time(),
        };

        let activity = calculate_aurora_activity(&solar_wind, &geomagnetic);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ–æ—Ä–º—É–ª—ã
        let kp_component = (geomagnetic.kp_index / 9.0).min(1.0) * 6.0;
        let speed_component = if solar_wind.speed > 600.0 {
            2.0
        } else if solar_wind.speed > 400.0 {
            1.0
        } else {
            0.0
        };
        let density_component = if solar_wind.density > 10.0 {
            2.0
        } else if solar_wind.density > 5.0 {
            1.0
        } else {
            0.0
        };

        let expected_activity = (kp_component + speed_component + density_component).min(10.0);
        assert_eq!(activity, expected_activity);
    }

    #[test]
    fn test_high_activity_aurora_calculation() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let solar_wind = SolarWindData {
            speed: 800.0,  // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            density: 15.0, // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
            temperature: 300000.0,
            magnetic_field: None,
            timestamp: get_current_utc_time(),
        };

        let geomagnetic = GeomagneticData {
            kp_index: 7.0, // –í—ã—Å–æ–∫–∏–π Kp –∏–Ω–¥–µ–∫—Å
            aurora_activity: 8.0,
            solar_radiation: None,
            timestamp: get_current_utc_time(),
        };

        let activity = calculate_aurora_activity(&solar_wind, &geomagnetic);
        assert!(activity > 8.0); // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    }

    #[test]
    fn test_aurora_activity_bounds() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let solar_wind = SolarWindData {
            speed: 1000.0,
            density: 20.0,
            temperature: 500000.0,
            magnetic_field: None,
            timestamp: get_current_utc_time(),
        };

        let geomagnetic = GeomagneticData {
            kp_index: 9.0,
            aurora_activity: 10.0,
            solar_radiation: None,
            timestamp: get_current_utc_time(),
        };

        let activity = calculate_aurora_activity(&solar_wind, &geomagnetic);
        assert_eq!(activity, 10.0); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    }
}
