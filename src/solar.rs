use anyhow::Result;
use chrono::{DateTime, Utc};
use colored::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct SolarWindData {
    pub speed: f64,          // –∫–º/—Å
    pub density: f64,        // —á–∞—Å—Ç–∏—Ü/—Å–º¬≥
    pub temperature: f64,    // –ö
    pub magnetic_field: f64, // –Ω–¢–ª
    pub timestamp: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GeomagneticData {
    pub kp_index: f64,        // –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    pub aurora_activity: f64, // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π (0-10)
    pub solar_radiation: f64, // –°–æ–ª–Ω–µ—á–Ω–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è
    pub timestamp: DateTime<Utc>,
}

#[derive(Debug)]
pub struct AuroraForecast {
    pub visibility_probability: f64, // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π
    pub intensity: String,           // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    pub best_viewing_hours: Vec<usize>,
    pub recommendations: Vec<String>,
    pub concerns: Vec<String>,
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ API
#[derive(Debug, Deserialize)]
struct NOAARealTimeData {
    data: Vec<NOAADataPoint>,
}

#[derive(Debug, Deserialize)]
struct NOAADataPoint {
    #[serde(rename = "time_tag")]
    time_tag: String,
    #[serde(rename = "density")]
    density: Option<f64>,
    #[serde(rename = "speed")]
    speed: Option<f64>,
    #[serde(rename = "temperature")]
    temperature: Option<f64>,
    #[serde(rename = "bz_gsm")]
    bz_gsm: Option<f64>,
}

#[derive(Debug, Deserialize)]
struct KPIndexData {
    data: Vec<KPDataPoint>,
}

#[derive(Debug, Deserialize)]
struct KPDataPoint {
    #[serde(rename = "time_tag")]
    time_tag: String,
    #[serde(rename = "kp_index")]
    kp_index: Option<f64>,
}

pub struct SolarService;

impl SolarService {
    pub fn new() -> Self {
        Self
    }

    pub async fn get_solar_wind_data(&self) -> Result<SolarWindData> {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç NOAA Space Weather API
        let url = "https://services.swpc.noaa.gov/json/plasma/plasma-6-hour.json";
        
        let response = match reqwest::get(url).await {
            Ok(resp) => resp,
            Err(_) => {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                return self.get_mock_solar_wind_data();
            }
        };
        
        if !response.status().is_success() {
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            return self.get_mock_solar_wind_data();
        }

        let noaa_data: NOAARealTimeData = match response.json().await {
            Ok(data) => data,
            Err(_) => {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                return self.get_mock_solar_wind_data();
            }
        };
        
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if let Some(latest_data) = noaa_data.data.last() {
            let speed = latest_data.speed.unwrap_or(400.0);
            let density = latest_data.density.unwrap_or(5.0);
            let temperature = latest_data.temperature.unwrap_or(100000.0);
            let magnetic_field = latest_data.bz_gsm.unwrap_or(5.0).abs();

            return Ok(SolarWindData {
                speed,
                density,
                temperature,
                magnetic_field,
                timestamp: Utc::now(),
            });
        }

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ
        self.get_mock_solar_wind_data()
    }

    pub async fn get_geomagnetic_data(&self) -> Result<GeomagneticData> {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Kp –∏–Ω–¥–µ–∫—Å–∞ –æ—Ç NOAA
        let url = "https://services.swpc.noaa.gov/json/planetary_k_index_1m.json";
        
        let response = match reqwest::get(url).await {
            Ok(resp) => resp,
            Err(_) => {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                return self.get_mock_geomagnetic_data();
            }
        };
        
        if !response.status().is_success() {
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            return self.get_mock_geomagnetic_data();
        }

        let kp_data: KPIndexData = match response.json().await {
            Ok(data) => data,
            Err(_) => {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                return self.get_mock_geomagnetic_data();
            }
        };
        
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Kp
        if let Some(latest_kp) = kp_data.data.last() {
            let kp_index = latest_kp.kp_index.unwrap_or(2.0);
            let aurora_activity = if kp_index > 4.0 {
                (kp_index - 4.0) * 2.0
            } else {
                0.0
            };

            return Ok(GeomagneticData {
                kp_index,
                aurora_activity,
                solar_radiation: 100.0 + (Utc::now().timestamp() % 50) as f64, // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∏–∞—Ü–∏–∏
                timestamp: Utc::now(),
            });
        }

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ
        self.get_mock_geomagnetic_data()
    }

    fn get_mock_solar_wind_data(&self) -> Result<SolarWindData> {
        Ok(SolarWindData {
            speed: 400.0 + (Utc::now().timestamp() % 200) as f64,
            density: 5.0 + (Utc::now().timestamp() % 10) as f64,
            temperature: 100000.0 + (Utc::now().timestamp() % 50000) as f64,
            magnetic_field: 5.0 + (Utc::now().timestamp() % 10) as f64,
            timestamp: Utc::now(),
        })
    }

    fn get_mock_geomagnetic_data(&self) -> Result<GeomagneticData> {
        let kp_index = 2.0 + (Utc::now().timestamp() % 7) as f64;
        let aurora_activity = if kp_index > 4.0 {
            (kp_index - 4.0) * 2.0
        } else {
            0.0
        };

        Ok(GeomagneticData {
            kp_index,
            aurora_activity,
            solar_radiation: 100.0 + (Utc::now().timestamp() % 50) as f64,
            timestamp: Utc::now(),
        })
    }

    pub fn predict_aurora(
        &self,
        solar_wind: &SolarWindData,
        geomagnetic: &GeomagneticData,
    ) -> AuroraForecast {
        let mut forecast = AuroraForecast {
            visibility_probability: 0.0,
            intensity: "–ù–∏–∑–∫–∞—è".to_string(),
            best_viewing_hours: Vec::new(),
            recommendations: Vec::new(),
            concerns: Vec::new(),
        };

        // –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π
        let mut probability: f64 = 0.0;

        // –í–ª–∏—è–Ω–∏–µ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞
        if solar_wind.speed > 500.0 {
            probability += 0.3;
        } else if solar_wind.speed > 400.0 {
            probability += 0.2;
        }

        if solar_wind.density > 10.0 {
            probability += 0.2;
        }

        // –í–ª–∏—è–Ω–∏–µ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if geomagnetic.kp_index > 5.0 {
            probability += 0.4;
            forecast.intensity = "–í—ã—Å–æ–∫–∞—è".to_string();
        } else if geomagnetic.kp_index > 3.0 {
            probability += 0.2;
            forecast.intensity = "–°—Ä–µ–¥–Ω—è—è".to_string();
        }

        // –õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è (–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è)
        for hour in 22..24 {
            forecast.best_viewing_hours.push(hour);
        }
        for hour in 0..6 {
            forecast.best_viewing_hours.push(hour);
        }

        forecast.visibility_probability = probability.min(1.0);

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if forecast.visibility_probability > 0.7 {
            forecast
                .recommendations
                .push("–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π!".to_string());
            forecast
                .recommendations
                .push("–ò—â–∏—Ç–µ —Ç–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞ –≤–¥–∞–ª–∏ –æ—Ç –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –æ–≥–Ω–µ–π".to_string());
        } else if forecast.visibility_probability > 0.4 {
            forecast
                .recommendations
                .push("–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π".to_string());
        } else {
            forecast
                .recommendations
                .push("–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π".to_string());
        }

        // –ü—Ä–æ–±–ª–µ–º—ã
        if geomagnetic.kp_index > 6.0 {
            forecast
                .concerns
                .push("–í—ã—Å–æ–∫–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É".to_string());
        }

        forecast
    }
}

pub fn print_aurora_forecast(forecast: &AuroraForecast, solar_wind: &SolarWindData, geomagnetic: &GeomagneticData) {
    println!("\n{}", "=== –ü–†–û–ì–ù–û–ó –°–ï–í–ï–†–ù–´–• –°–ò–Ø–ù–ò–ô ===".bold().purple());

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    println!("\n{}:", "–¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï".bold().cyan());
    println!("  üå™Ô∏è  –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞: {:.0} –∫–º/—Å", solar_wind.speed);
    println!("  üìä –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–ª–∞–∑–º—ã: {:.1} —á–∞—Å—Ç–∏—Ü/—Å–º¬≥", solar_wind.density);
    println!("  üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–ª–∞–∑–º—ã: {:.0} –ö", solar_wind.temperature);
    println!("  üß≤ –ú–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ: {:.1} –Ω–¢–ª", solar_wind.magnetic_field);
    println!("  üìà Kp –∏–Ω–¥–µ–∫—Å: {:.1}", geomagnetic.kp_index);
    println!("  ‚ò¢Ô∏è  –°–æ–ª–Ω–µ—á–Ω–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è: {:.0} SFU", geomagnetic.solar_radiation);

    println!(
        "\n{}: {:.1}%",
        "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏".bold(),
        forecast.visibility_probability * 100.0
    );
    println!("{}: {}", "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å".bold(), forecast.intensity);

    if !forecast.best_viewing_hours.is_empty() {
        println!("\n{}:", "–õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è".bold().cyan());
        for hour in &forecast.best_viewing_hours {
            println!("  üåô {}:00", hour);
        }
    }

    if !forecast.recommendations.is_empty() {
        println!("\n{}:", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏".bold().green());
        for rec in &forecast.recommendations {
            println!("  ‚úì {}", rec);
        }
    }

    if !forecast.concerns.is_empty() {
        println!("\n{}:", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è".bold().red());
        for concern in &forecast.concerns {
            println!("  ‚ö† {}", concern);
        }
    }
}
