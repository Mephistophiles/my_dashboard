use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc, Local};
use anyhow::Result;
use colored::*;

#[derive(Debug, Serialize, Deserialize)]
pub struct WeatherData {
    pub temperature: f64,
    pub humidity: f64,
    pub wind_speed: f64,
    pub cloud_cover: f64,
    pub visibility: f64,
    pub precipitation_probability: f64,
    pub description: String,
    pub timestamp: DateTime<Utc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct WeatherForecast {
    pub hourly: Vec<WeatherData>,
}

pub struct WeatherService {
    api_key: String,
    city: String,
}

impl WeatherService {
    pub fn new(api_key: String, city: String) -> Self {
        Self { api_key, city }
    }

    pub async fn get_weather_forecast(&self) -> Result<WeatherForecast> {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API OpenWeatherMap –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        let mut forecast = WeatherForecast { hourly: Vec::new() };
        
        for hour in 0..24 {
            let weather_data = WeatherData {
                temperature: 15.0 + (hour as f64 * 0.5) - 6.0, // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç 9 –¥–æ 21 –≥—Ä–∞–¥—É—Å–∞
                humidity: 60.0 + (hour as f64 * 2.0) % 40.0,
                wind_speed: 5.0 + (hour as f64 * 0.3) % 15.0,
                cloud_cover: if hour < 6 || hour > 18 { 20.0 } else { 40.0 + (hour as f64 * 3.0) % 60.0 },
                visibility: 10.0 - (hour as f64 * 0.1) % 5.0,
                precipitation_probability: if hour > 12 && hour < 18 { 30.0 } else { 5.0 },
                description: match hour {
                    6..=8 => "–Ø—Å–Ω–æ–µ —É—Ç—Ä–æ".to_string(),
                    9..=11 => "–°–æ–ª–Ω–µ—á–Ω–æ".to_string(),
                    12..=14 => "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å".to_string(),
                    15..=17 => "–û–±–ª–∞—á–Ω–æ".to_string(),
                    18..=20 => "–ó–∞–∫–∞—Ç".to_string(),
                    _ => "–ù–æ—á—å".to_string(),
                },
                timestamp: Utc::now() + chrono::Duration::hours(hour),
            };
            forecast.hourly.push(weather_data);
        }
        
        Ok(forecast)
    }
}

pub fn analyze_weather_for_photography(forecast: &WeatherForecast) -> WeatherAnalysis {
    let mut analysis = WeatherAnalysis {
        overall_score: 0.0,
        recommendations: Vec::new(),
        best_hours: Vec::new(),
        concerns: Vec::new(),
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    for (hour, weather) in forecast.hourly.iter().enumerate() {
        let mut hour_score = 0.0;
        let mut hour_recommendations = Vec::new();
        let mut hour_concerns = Vec::new();

        // –û—Ü–µ–Ω–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if weather.temperature >= 10.0 && weather.temperature <= 25.0 {
            hour_score += 2.0;
        } else {
            hour_concerns.push(format!("–ù–µ—É–¥–æ–±–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C", weather.temperature));
        }

        // –û—Ü–µ–Ω–∫–∞ –≤–µ—Ç—Ä–∞
        if weather.wind_speed < 10.0 {
            hour_score += 2.0;
        } else {
            hour_concerns.push(format!("–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä: {} –º/—Å", weather.wind_speed));
        }

        // –û—Ü–µ–Ω–∫–∞ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
        if weather.cloud_cover < 30.0 {
            hour_score += 3.0;
            hour_recommendations.push("–û—Ç–ª–∏—á–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å".to_string());
        } else if weather.cloud_cover < 70.0 {
            hour_score += 1.5;
            hour_recommendations.push("–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—ä–µ–º–∫–∏".to_string());
        } else {
            hour_concerns.push(format!("–í—ã—Å–æ–∫–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å: {}%", weather.cloud_cover));
        }

        // –û—Ü–µ–Ω–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        if weather.visibility > 8.0 {
            hour_score += 2.0;
        } else {
            hour_concerns.push(format!("–ü–ª–æ—Ö–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å: {} –∫–º", weather.visibility));
        }

        // –û—Ü–µ–Ω–∫–∞ –æ—Å–∞–¥–∫–æ–≤
        if weather.precipitation_probability < 20.0 {
            hour_score += 1.0;
        } else {
            hour_concerns.push(format!("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {}%", weather.precipitation_probability));
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if hour >= 6 && hour <= 8 {
            hour_score += 2.0; // –ó–æ–ª–æ—Ç–æ–π —á–∞—Å —É—Ç—Ä–æ–º
            hour_recommendations.push("–ó–æ–ª–æ—Ç–æ–π —á–∞—Å - –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—ä–µ–º–∫–∏".to_string());
        } else if hour >= 18 && hour <= 20 {
            hour_score += 2.0; // –ó–æ–ª–æ—Ç–æ–π —á–∞—Å –≤–µ—á–µ—Ä–æ–º
            hour_recommendations.push("–ó–æ–ª–æ—Ç–æ–π —á–∞—Å - –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—ä–µ–º–∫–∏".to_string());
        }

        if hour_score >= 7.0 {
            analysis.best_hours.push(hour);
        }

        analysis.overall_score += hour_score;
    }

    analysis.overall_score /= 24.0;

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if analysis.overall_score >= 7.0 {
        analysis.recommendations.push("–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!".to_string());
    } else if analysis.overall_score >= 5.0 {
        analysis.recommendations.push("–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—ä–µ–º–∫–∏".to_string());
    } else {
        analysis.recommendations.push("–£—Å–ª–æ–≤–∏—è –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏".to_string());
    }

    analysis
}

#[derive(Debug)]
pub struct WeatherAnalysis {
    pub overall_score: f64,
    pub recommendations: Vec<String>,
    pub best_hours: Vec<usize>,
    pub concerns: Vec<String>,
}

pub fn print_weather_analysis(analysis: &WeatherAnalysis) {
    println!("\n{}", "=== –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–´ –î–õ–Ø –§–û–¢–û–ì–†–ê–§–ò–ò ===".bold().blue());
    
    println!("\n{}: {:.1}/10", "–û–±—â–∏–π –±–∞–ª–ª".bold(), analysis.overall_score);
    
    if !analysis.recommendations.is_empty() {
        println!("\n{}:", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏".bold().green());
        for rec in &analysis.recommendations {
            println!("  ‚úì {}", rec);
        }
    }
    
    if !analysis.best_hours.is_empty() {
        println!("\n{}:", "–õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è —Å—ä–µ–º–∫–∏".bold().yellow());
        for hour in &analysis.best_hours {
            println!("  üïê {}:00", hour);
        }
    }
    
    if !analysis.concerns.is_empty() {
        println!("\n{}:", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã".bold().red());
        for concern in &analysis.concerns {
            println!("  ‚ö† {}", concern);
        }
    }
}
