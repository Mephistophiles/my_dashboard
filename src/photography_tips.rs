use colored::*;

#[derive(Debug)]
pub struct PhotographyTips {
    pub equipment_recommendations: Vec<String>,
    pub shooting_tips: Vec<String>,
    pub location_suggestions: Vec<String>,
    pub technical_settings: Vec<String>,
}

pub struct PhotographyTipsService;

impl PhotographyTipsService {
    pub fn new() -> Self {
        Self
    }

    pub fn get_tips_for_weather(
        &self,
        weather_score: f64,
        is_golden_hour: bool,
        aurora_probability: f64,
    ) -> PhotographyTips {
        let mut tips = PhotographyTips {
            equipment_recommendations: Vec::new(),
            shooting_tips: Vec::new(),
            location_suggestions: Vec::new(),
            technical_settings: Vec::new(),
        };

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        if weather_score < 5.0 {
            tips.equipment_recommendations
                .push("–í–æ–∑—å–º–∏—Ç–µ –∑–∞—â–∏—Ç—É –æ—Ç –¥–æ–∂–¥—è –¥–ª—è –∫–∞–º–µ—Ä—ã".to_string());
            tips.equipment_recommendations
                .push("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à—Ç–∞—Ç–∏–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏".to_string());
        }

        if aurora_probability > 0.5 {
            tips.equipment_recommendations
                .push("–®–∏—Ä–æ–∫–æ—É–≥–æ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç–∏–≤ –¥–ª—è —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π".to_string());
            tips.equipment_recommendations
                .push("–£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–ø—É—Å–∫ –∑–∞—Ç–≤–æ—Ä–∞".to_string());
            tips.equipment_recommendations
                .push("–¢–µ–ø–ª–∞—è –æ–¥–µ–∂–¥–∞ - —Å—ä–µ–º–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è".to_string());
        }

        if is_golden_hour {
            tips.equipment_recommendations
                .push("–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏".to_string());
            tips.equipment_recommendations
                .push("–ü–æ–ª—è—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä".to_string());
        }

        // –°–æ–≤–µ—Ç—ã –ø–æ —Å—ä–µ–º–∫–µ
        if is_golden_hour {
            tips.shooting_tips
                .push("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–ø–ª—ã–µ —Ç–æ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã".to_string());
            tips.shooting_tips
                .push("–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Å–∏–ª—É—ç—Ç–∞–º–∏".to_string());
            tips.shooting_tips
                .push("–ò—â–∏—Ç–µ –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–≤–æ–¥–∞, —Å—Ç–µ–∫–ª–æ)".to_string());
        }

        if aurora_probability > 0.5 {
            tips.shooting_tips
                .push("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª–∏–Ω–Ω—ã–µ –≤—ã–¥–µ—Ä–∂–∫–∏ (15-30 —Å–µ–∫—É–Ω–¥)".to_string());
            tips.shooting_tips
                .push("–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å".to_string());
            tips.shooting_tips
                .push("–°–Ω–∏–º–∞–π—Ç–µ –≤ RAW —Ñ–æ—Ä–º–∞—Ç–µ".to_string());
        }

        if weather_score >= 7.0 {
            tips.shooting_tips
                .push("–û—Ç–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π".to_string());
            tips.shooting_tips
                .push("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã".to_string());
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º
        if aurora_probability > 0.5 {
            tips.location_suggestions
                .push("–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∑–∞ –≥–æ—Ä–æ–¥, –ø–æ–¥–∞–ª—å—à–µ –æ—Ç —Å–≤–µ—Ç–æ–≤–æ–≥–æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è".to_string());
            tips.location_suggestions
                .push("–ò—â–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å —Ö–æ—Ä–æ—à–∏–º –æ–±–∑–æ—Ä–æ–º —Å–µ–≤–µ—Ä–∞".to_string());
        }

        if is_golden_hour {
            tips.location_suggestions
                .push("–ü–∞—Ä–∫–∏ –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –∑–æ–Ω—ã".to_string());
            tips.location_suggestions
                .push("–ì–æ—Ä–æ–¥—Å–∫–∏–µ –Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ".to_string());
            tips.location_suggestions
                .push("–°–º–æ—Ç—Ä–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∫–∏".to_string());
        }

        // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if is_golden_hour {
            tips.technical_settings.push("ISO: 100-400".to_string());
            tips.technical_settings
                .push("–î–∏–∞—Ñ—Ä–∞–≥–º–∞: f/8-f/16 –¥–ª—è –ø–µ–π–∑–∞–∂–µ–π".to_string());
            tips.technical_settings
                .push("–í—ã–¥–µ—Ä–∂–∫–∞: 1/60 - 1/250 —Å–µ–∫—É–Ω–¥—ã".to_string());
        }

        if aurora_probability > 0.5 {
            tips.technical_settings.push("ISO: 800-3200".to_string());
            tips.technical_settings
                .push("–î–∏–∞—Ñ—Ä–∞–≥–º–∞: f/2.8-f/4".to_string());
            tips.technical_settings
                .push("–í—ã–¥–µ—Ä–∂–∫–∞: 15-30 —Å–µ–∫—É–Ω–¥".to_string());
            tips.technical_settings
                .push("–ë–∞–ª–∞–Ω—Å –±–µ–ª–æ–≥–æ: 3500-4500K".to_string());
        }

        tips
    }

    pub fn get_general_recommendations(&self) -> Vec<String> {
        vec![
            "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–µ—Ä–µ–¥ —Å—ä–µ–º–∫–æ–π".to_string(),
            "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –∑–∞—Ä–∞–Ω–µ–µ".to_string(),
            "–ë–µ—Ä–∏—Ç–µ –∑–∞–ø–∞—Å–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏ –∏ –∫–∞—Ä—Ç—ã –ø–∞–º—è—Ç–∏".to_string(),
            "–ò–∑—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å—ä–µ–º–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö".to_string(),
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ —Å—ä–µ–º–∫–µ –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ".to_string(),
        ]
    }
}

pub fn print_photography_tips(tips: &PhotographyTips) {
    println!("\n{}", "=== –°–û–í–ï–¢–´ –î–õ–Ø –§–û–¢–û–ì–†–ê–§–û–í ===".bold().magenta());

    if !tips.equipment_recommendations.is_empty() {
        println!("\n{}:", "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ".bold().cyan());
        for rec in &tips.equipment_recommendations {
            println!("  üì∑ {}", rec);
        }
    }

    if !tips.shooting_tips.is_empty() {
        println!("\n{}:", "–°–æ–≤–µ—Ç—ã –ø–æ —Å—ä–µ–º–∫–µ".bold().green());
        for tip in &tips.shooting_tips {
            println!("  üí° {}", tip);
        }
    }

    if !tips.location_suggestions.is_empty() {
        println!("\n{}:", "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ª–æ–∫–∞—Ü–∏–∏".bold().blue());
        for location in &tips.location_suggestions {
            println!("  üìç {}", location);
        }
    }

    if !tips.technical_settings.is_empty() {
        println!("\n{}:", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏".bold().yellow());
        for setting in &tips.technical_settings {
            println!("  ‚öô {}", setting);
        }
    }
}
