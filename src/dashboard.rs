use crate::golden_hour::{GoldenHourInfo, GoldenHourService};
use crate::weather::{analyze_weather_for_photography, WeatherAnalysis, WeatherService};
use chrono::{DateTime, Local, Timelike};
use colored::*;
use crate::solar::predict_aurora;

#[derive(Debug)]
pub struct DashboardSummary {
    pub overall_recommendation: String,
    pub weather_score: f64,
    pub aurora_probability: f64,
    pub is_golden_hour_today: bool,
    pub best_shooting_hours: Vec<usize>,
    pub key_highlights: Vec<String>,
    pub warnings: Vec<String>,
}

pub struct PhotographyDashboard {
    weather_service: WeatherService,
    golden_hour_service: GoldenHourService,
}

impl PhotographyDashboard {
    pub fn new(api_key: String, city: String, latitude: f64, longitude: f64) -> Self {
        Self {
            weather_service: WeatherService::new(api_key, city),
            golden_hour_service: GoldenHourService::new(latitude, longitude),
        }
    }

    pub async fn generate_dashboard(&self) -> Result<DashboardSummary, Box<dyn std::error::Error>> {
        let current_time = Local::now();

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        let weather_forecast = match self.weather_service.get_weather_forecast().await {
            Ok(forecast) => forecast,
            Err(e) => {
                eprintln!(
                    "{}",
                    "‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–ì–û–î–´ –í –î–ê–®–ë–û–†–î–ï".bold().red()
                );
                eprintln!("–ü—Ä–∏—á–∏–Ω–∞: {}", e);
                eprintln!(
                    "{}",
                    "üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ demo_key".yellow()
                );
                return Err(e.into());
            }
        };
        let weather_analysis = analyze_weather_for_photography(&weather_forecast);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–ª–æ—Ç–æ–º —á–∞—Å–µ
        let golden_hour_info = self
            .golden_hour_service
            .calculate_golden_hours(current_time);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–æ–ª–æ—Ç–æ–π —á–∞—Å —Å–µ–≥–æ–¥–Ω—è
        let is_golden_hour_today = self.is_golden_hour_today(&golden_hour_info, current_time);

        // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π
        let aurora_probability = match predict_aurora().await {
            Ok(forecast) => forecast.visibility_probability,
            Err(e) => {
                eprintln!(
                    "{}",
                    "‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –°–ï–í–ï–†–ù–´–• –°–ò–Ø–ù–ò–Ø–•".bold().red()
                );
                eprintln!("–ü—Ä–∏—á–∏–Ω–∞: {}", e);
                eprintln!(
                    "{}",
                    "üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ".yellow()
                );
                return Err(e.into());
            }
        };

        // –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
        let summary = self.create_summary(
            &weather_analysis,
            &golden_hour_info,
            is_golden_hour_today,
            current_time,
            aurora_probability,
        );

        Ok(summary)
    }

    fn is_golden_hour_today(
        &self,
        golden_hour_info: &GoldenHourInfo,
        current_time: DateTime<Local>,
    ) -> bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–æ–ª–æ—Ç–æ–π —á–∞—Å
        (current_time >= golden_hour_info.golden_hour_morning_start
            && current_time <= golden_hour_info.golden_hour_morning_end)
            || (current_time >= golden_hour_info.golden_hour_evening_start
                && current_time <= golden_hour_info.golden_hour_evening_end)
    }

    fn create_summary(
        &self,
        weather_analysis: &WeatherAnalysis,
        golden_hour_info: &GoldenHourInfo,
        is_golden_hour_today: bool,
        current_time: DateTime<Local>,
        aurora_probability: f64,
    ) -> DashboardSummary {
        let mut key_highlights = Vec::new();
        let mut warnings = Vec::new();

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≥–æ–¥—É
        if weather_analysis.overall_score >= 8.0 {
            key_highlights.push("–û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—ä–µ–º–∫–∏!".to_string());
        } else if weather_analysis.overall_score >= 6.0 {
            key_highlights.push("–•–æ—Ä–æ—à–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è".to_string());
        } else {
            warnings.push("–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è —Å—ä–µ–º–∫–∏".to_string());
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–æ–ª–æ—Ç–æ–π —á–∞—Å
        if is_golden_hour_today {
            key_highlights.push("–°–µ–≥–æ–¥–Ω—è –∑–æ–ª–æ—Ç–æ–π —á–∞—Å - –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—ä–µ–º–∫–∏!".to_string());
        } else {
            let _current_hour = current_time.hour() as usize;
            if current_time.hour() as usize
                >= golden_hour_info.golden_hour_morning_start.hour() as usize
                && current_time.hour() as usize
                    <= golden_hour_info.golden_hour_morning_end.hour() as usize
            {
                key_highlights.push("–°–µ–π—á–∞—Å –∑–æ–ª–æ—Ç–æ–π —á–∞—Å —É—Ç—Ä–æ–º!".to_string());
            } else if current_time.hour() as usize
                >= golden_hour_info.golden_hour_evening_start.hour() as usize
                && current_time.hour() as usize
                    <= golden_hour_info.golden_hour_evening_end.hour() as usize
            {
                key_highlights.push("–°–µ–π—á–∞—Å –∑–æ–ª–æ—Ç–æ–π —á–∞—Å –≤–µ—á–µ—Ä–æ–º!".to_string());
            }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        let overall_recommendation = self
            .determine_overall_recommendation(weather_analysis.overall_score, is_golden_hour_today);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è —Å—ä–µ–º–∫–∏ –∏–∑ –ø–æ–≥–æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        let best_shooting_hours = weather_analysis.best_hours.clone();

        DashboardSummary {
            overall_recommendation,
            weather_score: weather_analysis.overall_score,
            aurora_probability,
            is_golden_hour_today,
            best_shooting_hours,
            key_highlights,
            warnings,
        }
    }

    fn determine_overall_recommendation(
        &self,
        weather_score: f64,
        is_golden_hour_today: bool,
    ) -> String {
        if weather_score >= 8.0 && is_golden_hour_today {
            "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏! –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –∑–æ–ª–æ—Ç–æ–π —á–∞—Å.".to_string()
        } else if weather_score >= 7.0 {
            "–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è —Å—ä–µ–º–∫–∏. –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã.".to_string()
        } else if weather_score >= 5.0 {
            "–£–º–µ—Ä–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—ä–µ–º–∫–∏. –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.".to_string()
        } else {
            "–°–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—ä–µ–º–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—ä–µ–º–∫—É.".to_string()
        }
    }

    pub fn print_dashboard(&self, summary: &DashboardSummary) {
        println!("\n{}", "=== –§–û–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –î–ê–®–ë–û–†–î ===".bold().white());
        println!("{}", "üìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê".bold().cyan());
        println!("   –ü–æ–≥–æ–¥–∞: {:.1}/10", summary.weather_score);
        println!("   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π: {:.0}%", summary.aurora_probability * 100.0);
        println!(
            "   –ó–æ–ª–æ—Ç–æ–π —á–∞—Å: {}",
            if summary.is_golden_hour_today {
                "–î–∞"
            } else {
                "–ù–µ—Ç"
            }
        );

        if !summary.best_shooting_hours.is_empty() {
            // –°–∂–∏–º–∞–µ–º —á–∞—Å—ã –¥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            let mut intervals = Vec::new();
            let mut start = summary.best_shooting_hours[0];
            let mut end = start;

            for &hour in &summary.best_shooting_hours[1..] {
                if hour == end + 1 {
                    end = hour;
                } else {
                    if start == end {
                        intervals.push(format!("{:02}:00", start));
                    } else {
                        intervals.push(format!("{:02}:00-{:02}:00", start, end));
                    }
                    start = hour;
                    end = hour;
                }
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if start == end {
                intervals.push(format!("{:02}:00", start));
            } else {
                intervals.push(format!("{:02}:00-{:02}:00", start, end));
            }

            println!("   –õ—É—á—à–∏–µ —á–∞—Å—ã: {}", intervals.join(", "));
        }

        if !summary.key_highlights.is_empty() {
            println!("{}", "‚ú® –ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´".bold().green());
            for highlight in &summary.key_highlights {
                println!("   ‚Ä¢ {}", highlight);
            }
        }

        if !summary.warnings.is_empty() {
            println!("{}", "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø".bold().yellow());
            for warning in &summary.warnings {
                println!("   ‚Ä¢ {}", warning);
            }
        }

        println!("{}", "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø".bold().blue());
        println!("   {}", summary.overall_recommendation);
    }
}
