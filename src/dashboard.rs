use crate::golden_hour::{GoldenHourInfo, GoldenHourService};
use crate::photography_tips::{PhotographyTips, PhotographyTipsService};
use crate::solar::{AuroraForecast, SolarService};
use crate::weather::{
    analyze_weather_for_photography, WeatherAnalysis, WeatherForecast, WeatherService,
};
use chrono::{DateTime, Local, Timelike};
use colored::*;

#[derive(Debug)]
pub struct DashboardSummary {
    pub overall_recommendation: String,
    pub weather_score: f64,
    pub aurora_probability: f64,
    pub is_golden_hour_today: bool,
    pub best_shooting_hours: Vec<usize>,
    pub key_highlights: Vec<String>,
    pub warnings: Vec<String>,
}

pub struct PhotographyDashboard {
    weather_service: WeatherService,
    solar_service: SolarService,
    golden_hour_service: GoldenHourService,
    tips_service: PhotographyTipsService,
}

impl PhotographyDashboard {
    pub fn new(api_key: String, city: String, latitude: f64, longitude: f64) -> Self {
        Self {
            weather_service: WeatherService::new(api_key, city),
            solar_service: SolarService::new(),
            golden_hour_service: GoldenHourService::new(latitude, longitude),
            tips_service: PhotographyTipsService::new(),
        }
    }

    pub async fn generate_dashboard(&self) -> Result<DashboardSummary, Box<dyn std::error::Error>> {
        let current_time = Local::now();

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        let weather_forecast = self.weather_service.get_weather_forecast().await?;
        let weather_analysis = analyze_weather_for_photography(&weather_forecast);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let solar_wind_data = self.solar_service.get_solar_wind_data().await?;
        let geomagnetic_data = self.solar_service.get_geomagnetic_data().await?;
        let aurora_forecast = self
            .solar_service
            .predict_aurora(&solar_wind_data, &geomagnetic_data);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–ª–æ—Ç–æ–º —á–∞—Å–µ
        let golden_hour_info = self
            .golden_hour_service
            .calculate_golden_hours(current_time);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–æ–ª–æ—Ç–æ–π —á–∞—Å —Å–µ–≥–æ–¥–Ω—è
        let is_golden_hour_today = self.is_golden_hour_today(&golden_hour_info, current_time);

        // –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
        let summary = self.create_summary(
            &weather_analysis,
            &aurora_forecast,
            &golden_hour_info,
            is_golden_hour_today,
            current_time,
        );

        Ok(summary)
    }

    fn is_golden_hour_today(
        &self,
        golden_hour_info: &GoldenHourInfo,
        current_time: DateTime<Local>,
    ) -> bool {
        let current_hour = current_time.hour() as usize;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–æ–ª–æ—Ç–æ–π —á–∞—Å
        (current_time >= golden_hour_info.golden_hour_morning_start
            && current_time <= golden_hour_info.golden_hour_morning_end)
            || (current_time >= golden_hour_info.golden_hour_evening_start
                && current_time <= golden_hour_info.golden_hour_evening_end)
    }

    fn create_summary(
        &self,
        weather_analysis: &WeatherAnalysis,
        aurora_forecast: &AuroraForecast,
        golden_hour_info: &GoldenHourInfo,
        is_golden_hour_today: bool,
        current_time: DateTime<Local>,
    ) -> DashboardSummary {
        let mut key_highlights = Vec::new();
        let mut warnings = Vec::new();

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≥–æ–¥—É
        if weather_analysis.overall_score >= 8.0 {
            key_highlights.push("–û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—ä–µ–º–∫–∏!".to_string());
        } else if weather_analysis.overall_score >= 6.0 {
            key_highlights.push("–•–æ—Ä–æ—à–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è".to_string());
        } else {
            warnings.push("–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è —Å—ä–µ–º–∫–∏".to_string());
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–≤–µ—Ä–Ω—ã–µ —Å–∏—è–Ω–∏—è
        if aurora_forecast.visibility_probability > 0.7 {
            key_highlights.push("–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π!".to_string());
        } else if aurora_forecast.visibility_probability > 0.4 {
            key_highlights.push("–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π".to_string());
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–æ–ª–æ—Ç–æ–π —á–∞—Å
        if is_golden_hour_today {
            key_highlights.push("–°–µ–≥–æ–¥–Ω—è –∑–æ–ª–æ—Ç–æ–π —á–∞—Å - –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—ä–µ–º–∫–∏!".to_string());
        } else {
            let current_hour = current_time.hour() as usize;
            if current_hour >= golden_hour_info.golden_hour_morning_start.hour() as usize
                && current_hour <= golden_hour_info.golden_hour_morning_end.hour() as usize
            {
                key_highlights.push("–°–µ–π—á–∞—Å –∑–æ–ª–æ—Ç–æ–π —á–∞—Å —É—Ç—Ä–æ–º!".to_string());
            } else if current_hour >= golden_hour_info.golden_hour_evening_start.hour() as usize
                && current_hour <= golden_hour_info.golden_hour_evening_end.hour() as usize
            {
                key_highlights.push("–°–µ–π—á–∞—Å –∑–æ–ª–æ—Ç–æ–π —á–∞—Å –≤–µ—á–µ—Ä–æ–º!".to_string());
            }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        let overall_recommendation = self.determine_overall_recommendation(
            weather_analysis.overall_score,
            aurora_forecast.visibility_probability,
            is_golden_hour_today,
        );

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è —Å—ä–µ–º–∫–∏
        let mut best_shooting_hours = weather_analysis.best_hours.clone();
        best_shooting_hours.extend(&aurora_forecast.best_viewing_hours);
        best_shooting_hours.sort();
        best_shooting_hours.dedup();

        DashboardSummary {
            overall_recommendation,
            weather_score: weather_analysis.overall_score,
            aurora_probability: aurora_forecast.visibility_probability,
            is_golden_hour_today,
            best_shooting_hours,
            key_highlights,
            warnings,
        }
    }

    fn determine_overall_recommendation(
        &self,
        weather_score: f64,
        aurora_probability: f64,
        is_golden_hour_today: bool,
    ) -> String {
        let mut score = 0.0;

        // –í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã (40% –≤–µ—Å–∞)
        score += weather_score * 0.4;

        // –í–ª–∏—è–Ω–∏–µ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π (30% –≤–µ—Å–∞)
        score += aurora_probability * 10.0 * 0.3;

        // –í–ª–∏—è–Ω–∏–µ –∑–æ–ª–æ—Ç–æ–≥–æ —á–∞—Å–∞ (30% –≤–µ—Å–∞)
        if is_golden_hour_today {
            score += 10.0 * 0.3;
        }

        match score {
            s if s >= 8.0 => "üöÄ –û–¢–õ–ò–ß–ù–û! –°–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!".to_string(),
            s if s >= 6.0 => "‚úÖ –•–û–†–û–®–û! –£—Å–ª–æ–≤–∏—è –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Å—ä–µ–º–∫–∏".to_string(),
            s if s >= 4.0 => "‚ö†Ô∏è –£–ú–ï–†–ï–ù–ù–û. –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–µ–º–ª–µ–º—ã–µ, –Ω–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã–µ".to_string(),
            _ => "‚ùå –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø. –õ—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—ä–µ–º–∫—É –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å".to_string(),
        }
    }

    pub fn print_dashboard(&self, summary: &DashboardSummary) {
        println!("\n{}", "=".repeat(60));
        println!(
            "{}",
            "üì∏ –î–ê–®–ë–û–†–î –î–õ–Ø –§–û–¢–û–ì–†–ê–§–û–í üì∏".bold().white().on_blue()
        );
        println!("{}", "=".repeat(60));

        println!("\n{}", summary.overall_recommendation.bold());

        if !summary.key_highlights.is_empty() {
            println!("\n{}:", "–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã".bold().green());
            for highlight in &summary.key_highlights {
                println!("  ‚ú® {}", highlight);
            }
        }

        if !summary.warnings.is_empty() {
            println!("\n{}:", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è".bold().red());
            for warning in &summary.warnings {
                println!("  ‚ö† {}", warning);
            }
        }

        println!(
            "\n{}: {:.1}/10",
            "–û—Ü–µ–Ω–∫–∞ –ø–æ–≥–æ–¥—ã".bold(),
            summary.weather_score
        );
        println!(
            "{}: {:.1}%",
            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π".bold(),
            summary.aurora_probability * 100.0
        );
        println!(
            "{}: {}",
            "–ó–æ–ª–æ—Ç–æ–π —á–∞—Å —Å–µ–≥–æ–¥–Ω—è".bold(),
            if summary.is_golden_hour_today {
                "–î–∞"
            } else {
                "–ù–µ—Ç"
            }
        );

        if !summary.best_shooting_hours.is_empty() {
            println!("\n{}:", "–õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è —Å—ä–µ–º–∫–∏".bold().yellow());
            for hour in &summary.best_shooting_hours {
                println!("  üïê {}:00", hour);
            }
        }

        println!("\n{}", "=".repeat(60));
    }
}
