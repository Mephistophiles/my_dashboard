//! # My Dashboard - –î–∞—à–±–æ—Ä–¥ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤
//!
//! –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞–º
//! –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—ä–µ–º–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π, –∑–æ–ª–æ—Ç–æ–≥–æ —á–∞—Å–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π.
//!
//! ## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
//!
//! - **–ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥—ã**: –û—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–µ—Ç—Ä–∞, –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏ –∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
//! - **–ó–æ–ª–æ—Ç–æ–π —á–∞—Å**: –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—ä–µ–º–∫–∏ —Å –º—è–≥–∫–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
//! - **–°–µ–≤–µ—Ä–Ω—ã–µ —Å–∏—è–Ω–∏—è**: –ü—Ä–æ–≥–Ω–æ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π –¥–ª—è –∞—Å—Ç—Ä–æ—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
//! - **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã**: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫–∞–º–µ—Ä—ã
//!
//! ## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
//!
//! ```rust
//! use my_dashboard::dashboard::PhotographyDashboard;
//!
//! // –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
//! let dashboard = PhotographyDashboard::new(
//!     "your_api_key".to_string(),
//!     "Moscow".to_string(),
//!     55.7558,
//!     37.6176,
//! );
//!
//! // –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
//! // #[tokio::main]
//! // async fn main() -> Result<(), Box<dyn std::error::Error>> {
//! //     let summary = dashboard.generate_dashboard().await?;
//! //     dashboard.print_dashboard(&summary);
//! //     Ok(())
//! // }
//! ```
//!
//! ## –ú–æ–¥—É–ª–∏
//!
//! - [`dashboard`] - –û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥ –∏ —Å–≤–æ–¥–∫–∞
//! - [`weather`] - –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
//! - [`golden_hour`] - –†–∞—Å—á–µ—Ç –∑–æ–ª–æ—Ç–æ–≥–æ —á–∞—Å–∞
//! - [`solar`] - –ü—Ä–æ–≥–Ω–æ–∑ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π
//! - [`photography_tips`] - –°–æ–≤–µ—Ç—ã –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤

pub mod dashboard;
pub mod golden_hour;
pub mod photography_tips;
pub mod solar;
pub mod weather;

use anyhow::Result;
use std::env;

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤–º–µ—Å—Ç–æ –ø—Ä–∏–Ω—Ç–æ–≤
#[derive(Debug, Clone)]
pub struct WeatherOutput {
    pub current_weather: String,
    pub temperature_range: String,
    pub best_hours: String,
    pub overall_score: f64,
    pub recommendation: String,
    pub concerns: String,
}

#[derive(Debug, Clone)]
pub struct AstrophotographyOutput {
    pub is_suitable: bool,
    pub avg_cloud_cover: f64,
    pub best_hours: String,
    pub recommendation: String,
}

#[derive(Debug, Clone)]
pub struct SolarOutput {
    pub solar_wind: String,
    pub geomagnetic: String,
    pub aurora_forecast: String,
    pub best_viewing_hours: String,
}

#[derive(Debug, Clone)]
pub struct GoldenHourOutput {
    pub sunrise_sunset: String,
    pub golden_hours: String,
    pub blue_hours: String,
    pub current_condition: String,
}

#[derive(Debug, Clone)]
pub struct PhotographyTipsOutput {
    pub equipment_recommendations: Vec<String>,
    pub shooting_tips: Vec<String>,
    pub location_suggestions: Vec<String>,
    pub technical_settings: Vec<String>,
    pub general_recommendations: Vec<String>,
}

#[derive(Debug, Clone)]
pub struct DashboardOutput {
    pub summary: dashboard::DashboardSummary,
    pub weather_output: WeatherOutput,
    pub astrophotography_output: AstrophotographyOutput,
    pub solar_output: SolarOutput,
    pub golden_hour_output: GoldenHourOutput,
    pub tips_output: PhotographyTipsOutput,
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
pub async fn process_weather_data(
    api_key: String,
    city: String,
) -> Result<(f64, WeatherOutput, AstrophotographyOutput)> {
    let weather_service = weather::WeatherService::new(api_key, city);
    let forecast = weather_service.get_weather_forecast().await?;

    let analysis = weather::analyze_weather_for_photography(&forecast);
    let weather_score = analysis.overall_score;

    let weather_output = generate_weather_output(&forecast, &analysis);
    let astrophotography_output = generate_astrophotography_output(&forecast);

    Ok((weather_score, weather_output, astrophotography_output))
}

pub async fn process_solar_data() -> Result<(f64, SolarOutput)> {
    let solar_output = generate_solar_output().await?;
    let aurora_probability = solar_output
        .aurora_forecast
        .split_whitespace()
        .find(|s| s.ends_with('%'))
        .and_then(|s| s.trim_end_matches('%').parse::<f64>().ok())
        .map(|p| p / 100.0)
        .unwrap_or(0.0);

    Ok((aurora_probability, solar_output))
}

pub fn process_golden_hour(latitude: f64, longitude: f64) -> (bool, GoldenHourOutput) {
    let golden_hour_service = golden_hour::GoldenHourService::new(latitude, longitude);
    let is_golden_hour = golden_hour_service.is_golden_hour();
    let golden_hour_output = generate_golden_hour_output(&golden_hour_service);

    (is_golden_hour, golden_hour_output)
}

pub fn process_photography_tips(
    weather_score: f64,
    is_golden_hour: bool,
    aurora_probability: f64,
) -> PhotographyTipsOutput {
    let tips_service = photography_tips::PhotographyTipsService::new();
    let personalized_tips =
        tips_service.get_tips_for_weather(weather_score, is_golden_hour, aurora_probability);
    let general_tips = tips_service.get_general_recommendations();

    PhotographyTipsOutput {
        equipment_recommendations: personalized_tips.equipment_recommendations,
        shooting_tips: personalized_tips.shooting_tips,
        location_suggestions: personalized_tips.location_suggestions,
        technical_settings: personalized_tips.technical_settings,
        general_recommendations: general_tips,
    }
}

pub async fn generate_dashboard_output(
    api_key: String,
    city: String,
    latitude: f64,
    longitude: f64,
) -> Result<DashboardOutput, anyhow::Error> {
    // –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    let dashboard =
        dashboard::PhotographyDashboard::new(api_key.clone(), city.clone(), latitude, longitude);
    let summary = dashboard.generate_dashboard().await?;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã
    let (weather_score, weather_output, astrophotography_output) =
        process_weather_data(api_key.clone(), city.clone()).await?;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–ª–Ω–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let (aurora_probability, solar_output) = process_solar_data().await?;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–æ–ª–æ—Ç–æ–π —á–∞—Å
    let (is_golden_hour, golden_hour_output) = process_golden_hour(latitude, longitude);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≤–µ—Ç—ã
    let tips_output = process_photography_tips(weather_score, is_golden_hour, aurora_probability);

    Ok(DashboardOutput {
        summary,
        weather_output,
        astrophotography_output,
        solar_output,
        golden_hour_output,
        tips_output,
    })
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫
fn generate_weather_output(
    forecast: &weather::WeatherForecast,
    analysis: &weather::WeatherAnalysis,
) -> WeatherOutput {
    let current_weather = if let Some(current) = forecast.hourly.first() {
        format!(
            "üå§Ô∏è –ü–æ–≥–æ–¥–∞: üå°Ô∏è{:.1}¬∞C  ‚òÅÔ∏è{:.0}%  üí®{:.1}–º/—Å  üåßÔ∏è{:.0}%  üìù{}",
            current.temperature,
            current.cloud_cover,
            current.wind_speed,
            current.precipitation_probability,
            current.description
        )
    } else {
        "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ".to_string()
    };

    let min_temp = forecast
        .hourly
        .iter()
        .map(|w| w.temperature)
        .fold(f64::INFINITY, f64::min);
    let max_temp = forecast
        .hourly
        .iter()
        .map(|w| w.temperature)
        .fold(f64::NEG_INFINITY, f64::max);
    let max_precip = forecast
        .hourly
        .iter()
        .map(|w| w.precipitation_probability)
        .fold(0.0, f64::max);
    let max_wind = forecast
        .hourly
        .iter()
        .map(|w| w.wind_speed)
        .fold(0.0, f64::max);

    let temperature_range = format!(
        "üìä –î–∏–∞–ø–∞–∑–æ–Ω: üå°Ô∏è{}-{}¬∞C  üí®–í–µ—Ç–µ—Ä –¥–æ {:.1}–º/—Å  üåßÔ∏è–û—Å–∞–¥–∫–∏ –¥–æ {:.0}%",
        min_temp as i32, max_temp as i32, max_wind, max_precip
    );

    let best_hours = if !analysis.best_hours.is_empty() {
        let mut intervals = Vec::new();
        let mut start = analysis.best_hours[0];
        let mut end = start;

        for &hour in &analysis.best_hours[1..] {
            if hour == end + 1 {
                end = hour;
            } else {
                if start == end {
                    intervals.push(format!("{:02}:00", start));
                } else {
                    intervals.push(format!("{:02}:00-{:02}:00", start, end));
                }
                start = hour;
                end = hour;
            }
        }
        if start == end {
            intervals.push(format!("{:02}:00", start));
        } else {
            intervals.push(format!("{:02}:00-{:02}:00", start, end));
        }

        format!(
            "üïê –õ—É—á—à–∏–µ —á–∞—Å—ã: {}",
            intervals
                .iter()
                .take(3)
                .cloned()
                .collect::<Vec<_>>()
                .join(" ")
        )
    } else {
        "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞—Å–æ–≤".to_string()
    };

    let recommendation = if !analysis.recommendations.is_empty() {
        format!("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {}", analysis.recommendations[0])
    } else {
        String::new()
    };

    let concerns = if !analysis.concerns.is_empty() {
        format!("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {}", analysis.concerns[0])
    } else {
        String::new()
    };

    WeatherOutput {
        current_weather,
        temperature_range,
        best_hours,
        overall_score: analysis.overall_score,
        recommendation,
        concerns,
    }
}

fn generate_astrophotography_output(forecast: &weather::WeatherForecast) -> AstrophotographyOutput {
    let analysis = weather::analyze_astrophotography_conditions(forecast);
    let avg_cloud_cover =
        forecast.hourly.iter().map(|w| w.cloud_cover).sum::<f64>() / forecast.hourly.len() as f64;

    let best_hours = if !analysis.best_hours.is_empty() {
        let mut intervals = Vec::new();
        let mut start = analysis.best_hours[0];
        let mut end = start;

        for &hour in &analysis.best_hours[1..] {
            if hour == end + 1 {
                end = hour;
            } else {
                if start == end {
                    intervals.push(format!("{:02}:00", start));
                } else {
                    intervals.push(format!("{:02}:00-{:02}:00", start, end));
                }
                start = hour;
                end = hour;
            }
        }
        if start == end {
            intervals.push(format!("{:02}:00", start));
        } else {
            intervals.push(format!("{:02}:00-{:02}:00", start, end));
        }

        format!(
            "üïê –õ—É—á—à–∏–µ —á–∞—Å—ã: {}",
            intervals
                .iter()
                .take(2)
                .cloned()
                .collect::<Vec<_>>()
                .join(" ")
        )
    } else {
        "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞—Å–æ–≤".to_string()
    };

    let recommendation = if !analysis.recommendations.is_empty() {
        format!("üí° {}", analysis.recommendations[0])
    } else {
        String::new()
    };

    AstrophotographyOutput {
        is_suitable: analysis.is_suitable,
        avg_cloud_cover,
        best_hours,
        recommendation,
    }
}

async fn generate_solar_output() -> Result<SolarOutput> {
    let solar_wind = match solar::fetch_solar_wind_data().await {
        Ok(data) => format!(
            "üåû –°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä: üí®{:.1}–∫–º/—Å  üìä{:.1}—á–∞—Å—Ç–∏—Ü/—Å–º¬≥  üå°Ô∏è{:.0}K  üïê{}",
            data.speed,
            data.density,
            data.temperature,
            data.timestamp.format("%H:%M")
        ),
        Err(e) => format!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞: {}", e),
    };

    let geomagnetic = match solar::fetch_geomagnetic_data().await {
        Ok(data) => format!(
            "üåç –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: üß≤Kp {:.1}  üåå–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—è–Ω–∏–π {:.1}/10  üïê{}",
            data.kp_index,
            data.aurora_activity,
            data.timestamp.format("%H:%M")
        ),
        Err(e) => format!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {}", e),
    };

    let (aurora_forecast, best_viewing_hours) = match solar::predict_aurora().await {
        Ok(forecast) => {
            let forecast_str = format!(
                "üåå –ü—Ä–æ–≥–Ω–æ–∑ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π: {}%  üìä{}  üí°{}",
                (forecast.visibility_probability * 100.0) as i32,
                forecast.intensity_level,
                forecast.conditions
            );

            let hours_str = if !forecast.best_viewing_hours.is_empty() {
                let mut intervals = Vec::new();
                let mut start = forecast.best_viewing_hours[0];
                let mut end = start;

                for &hour in &forecast.best_viewing_hours[1..] {
                    if hour == end + 1 {
                        end = hour;
                    } else {
                        if start == end {
                            intervals.push(format!("{:02}:00", start));
                        } else {
                            intervals.push(format!("{:02}:00-{:02}:00", start, end));
                        }
                        start = hour;
                        end = hour;
                    }
                }
                if start == end {
                    intervals.push(format!("{:02}:00", start));
                } else {
                    intervals.push(format!("{:02}:00-{:02}:00", start, end));
                }

                format!("üïê –õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {}", intervals.join(", "))
            } else {
                String::new()
            };

            (forecast_str, hours_str)
        }
        Err(e) => (
            format!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π: {}", e),
            String::new(),
        ),
    };

    Ok(SolarOutput {
        solar_wind,
        geomagnetic,
        aurora_forecast,
        best_viewing_hours,
    })
}

fn generate_golden_hour_output(service: &golden_hour::GoldenHourService) -> GoldenHourOutput {
    let current_time = chrono::Local::now();
    let info = service.calculate_golden_hours(current_time);
    let current_condition = service.get_current_lighting_condition(current_time);

    let sunrise_sunset = format!(
        "üåÖ –í–æ—Å—Ö–æ–¥: {} | üåÜ –ó–∞–∫–∞—Ç: {}",
        info.sunrise.format("%H:%M"),
        info.sunset.format("%H:%M")
    );

    let golden_hours = format!(
        "üåÖ –ó–æ–ª–æ—Ç–æ–π —á–∞—Å —É—Ç—Ä–æ: {}-{} | üåÜ –ó–æ–ª–æ—Ç–æ–π —á–∞—Å –≤–µ—á–µ—Ä: {}-{}",
        info.golden_hour_morning_start.format("%H:%M"),
        info.golden_hour_morning_end.format("%H:%M"),
        info.golden_hour_evening_start.format("%H:%M"),
        info.golden_hour_evening_end.format("%H:%M")
    );

    let blue_hours = format!(
        "üåÖ –°–∏–Ω–∏–π —á–∞—Å —É—Ç—Ä–æ: {}-{} | üåÜ –°–∏–Ω–∏–π —á–∞—Å –≤–µ—á–µ—Ä: {}-{}",
        info.blue_hour_morning_start.format("%H:%M"),
        info.blue_hour_morning_end.format("%H:%M"),
        info.blue_hour_evening_start.format("%H:%M"),
        info.blue_hour_evening_end.format("%H:%M")
    );

    GoldenHourOutput {
        sunrise_sunset,
        golden_hours,
        blue_hours,
        current_condition,
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
pub fn load_environment_variables() -> (String, String, f64, f64) {
    let api_key = env::var("OPENWEATHER_API_KEY").unwrap_or_else(|_| {
        log::warn!("OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º demo_key");
        "demo_key".to_string()
    });

    let city = env::var("CITY").unwrap_or_else(|_| {
        log::info!("CITY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤–∞");
        "Moscow".to_string()
    });

    let latitude = env::var("LATITUDE")
        .unwrap_or_else(|_| "55.7558".to_string())
        .parse::<f64>()
        .unwrap_or(55.7558);

    let longitude = env::var("LONGITUDE")
        .unwrap_or_else(|_| "37.6176".to_string())
        .parse::<f64>()
        .unwrap_or(37.6176);

    (api_key, city, latitude, longitude)
}

pub fn validate_coordinates(latitude: f64, longitude: f64) -> bool {
    (-90.0..=90.0).contains(&latitude) && (-180.0..=180.0).contains(&longitude)
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –¥–∞—à–±–æ—Ä–¥–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è snapshot testing
pub fn format_dashboard_output(output: &DashboardOutput) -> String {
    let mut result = String::new();

    // –û—Å–Ω–æ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞
    result.push_str("=== –§–û–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –î–ê–®–ë–û–†–î ===\n");
    result.push_str("üìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê\n");
    result.push_str(&format!(
        "   –ü–æ–≥–æ–¥–∞: {:.1}/10\n",
        output.summary.weather_score
    ));
    result.push_str(&format!(
        "   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π: {:.0}%\n",
        output.summary.aurora_probability * 100.0
    ));
    result.push_str(&format!(
        "   –ó–æ–ª–æ—Ç–æ–π —á–∞—Å: {}\n",
        if output.summary.is_golden_hour_today {
            "–î–∞"
        } else {
            "–ù–µ—Ç"
        }
    ));

    if !output.summary.best_shooting_hours.is_empty() {
        result.push_str(&format!(
            "   –õ—É—á—à–∏–µ —á–∞—Å—ã: {}\n",
            output
                .summary
                .best_shooting_hours
                .iter()
                .map(|h| format!("{:02}:00", h))
                .collect::<Vec<_>>()
                .join(", ")
        ));
    }

    if !output.summary.key_highlights.is_empty() {
        result.push_str("‚ú® –ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´\n");
        for highlight in &output.summary.key_highlights {
            result.push_str(&format!("   ‚Ä¢ {}\n", highlight));
        }
    }

    if !output.summary.warnings.is_empty() {
        result.push_str("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø\n");
        for warning in &output.summary.warnings {
            result.push_str(&format!("   ‚Ä¢ {}\n", warning));
        }
    }

    result.push_str("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø\n");
    result.push_str(&format!("   {}\n", output.summary.overall_recommendation));

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    result.push_str("\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n");
    result.push_str(&format!("{}\n", output.weather_output.current_weather));
    result.push_str(&format!(
        "{}  {}  | ‚≠ê –û—Ü–µ–Ω–∫–∞: {:.1}/10\n",
        output.weather_output.temperature_range,
        output.weather_output.best_hours,
        output.weather_output.overall_score
    ));

    if !output.weather_output.recommendation.is_empty() {
        result.push_str(&output.weather_output.recommendation);
    }
    if !output.weather_output.concerns.is_empty() {
        result.push_str(&format!(" | {}", output.weather_output.concerns));
    }
    result.push('\n');

    // –ê—Å—Ç—Ä–æ—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
    result.push_str(&format!(
        "üåå –ê—Å—Ç—Ä–æ—Ñ–æ—Ç–æ: {} | ‚òÅÔ∏è{:.0}% | ",
        if output.astrophotography_output.is_suitable {
            "‚úÖ"
        } else {
            "‚ùå"
        },
        output.astrophotography_output.avg_cloud_cover
    ));

    if !output.astrophotography_output.best_hours.is_empty() {
        result.push_str(&format!("{} ", output.astrophotography_output.best_hours));
    }
    if !output.astrophotography_output.recommendation.is_empty() {
        result.push_str(&format!(
            "| {}",
            output.astrophotography_output.recommendation
        ));
    }
    result.push('\n');

    // –°–æ–ª–Ω–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    result.push_str(&format!("{}\n", output.solar_output.solar_wind));
    result.push_str(&format!("{}\n", output.solar_output.geomagnetic));
    result.push_str(&format!("{}\n", output.solar_output.aurora_forecast));
    if !output.solar_output.best_viewing_hours.is_empty() {
        result.push_str(&format!("   {}\n", output.solar_output.best_viewing_hours));
    }

    // –ó–æ–ª–æ—Ç–æ–π —á–∞—Å
    result.push_str(&format!("{}\n", output.golden_hour_output.sunrise_sunset));
    result.push_str(&format!("{}\n", output.golden_hour_output.golden_hours));
    result.push_str(&format!("{}\n", output.golden_hour_output.blue_hours));
    result.push_str(&format!(
        "üí° –¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è: {}\n",
        output.golden_hour_output.current_condition
    ));

    // –°–æ–≤–µ—Ç—ã
    result.push_str("\n=== –°–û–í–ï–¢–´ –î–õ–Ø –§–û–¢–û–ì–†–ê–§–û–í ===\n");

    if !output.tips_output.equipment_recommendations.is_empty() {
        result.push_str("\nüì∑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Æ:\n");
        for (i, tip) in output
            .tips_output
            .equipment_recommendations
            .iter()
            .enumerate()
        {
            result.push_str(&format!("{}. {}\n", i + 1, tip));
        }
    }

    if !output.tips_output.shooting_tips.is_empty() {
        result.push_str("\nüéØ –°–û–í–ï–¢–´ –ü–û –°–™–ï–ú–ö–ï:\n");
        for (i, tip) in output.tips_output.shooting_tips.iter().enumerate() {
            result.push_str(&format!("{}. {}\n", i + 1, tip));
        }
    }

    if !output.tips_output.location_suggestions.is_empty() {
        result.push_str("\nüìç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –õ–û–ö–ê–¶–ò–Ø–ú:\n");
        for (i, tip) in output.tips_output.location_suggestions.iter().enumerate() {
            result.push_str(&format!("{}. {}\n", i + 1, tip));
        }
    }

    if !output.tips_output.technical_settings.is_empty() {
        result.push_str("\n‚öôÔ∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:\n");
        for (i, tip) in output.tips_output.technical_settings.iter().enumerate() {
            result.push_str(&format!("{}. {}\n", i + 1, tip));
        }
    }

    result.push_str("\n=== –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===\n");
    for (i, tip) in output
        .tips_output
        .general_recommendations
        .iter()
        .enumerate()
    {
        result.push_str(&format!("{}. {}\n", i + 1, tip));
    }

    result
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::env;
    use tokio::runtime::Runtime;

    #[test]
    fn test_validate_coordinates() {
        assert!(validate_coordinates(55.7558, 37.6176));
        assert!(!validate_coordinates(100.0, 200.0));
    }

    #[test]
    fn test_format_dashboard_output_smoke() {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è smoke-—Ç–µ—Å—Ç–∞
        let output = DashboardOutput {
            summary: dashboard::DashboardSummary {
                overall_recommendation: "Test".to_string(),
                weather_score: 5.0,
                aurora_probability: 0.5,
                is_golden_hour_today: false,
                best_shooting_hours: vec![6, 18],
                key_highlights: vec!["Test highlight".to_string()],
                warnings: vec!["Test warning".to_string()],
            },
            weather_output: WeatherOutput {
                current_weather: "Test weather".to_string(),
                temperature_range: "9-20¬∞C".to_string(),
                best_hours: "06:00-08:00".to_string(),
                overall_score: 5.0,
                recommendation: "Test rec".to_string(),
                concerns: "Test concern".to_string(),
            },
            astrophotography_output: AstrophotographyOutput {
                is_suitable: false,
                avg_cloud_cover: 50.0,
                best_hours: "00:00".to_string(),
                recommendation: "No astro".to_string(),
            },
            solar_output: SolarOutput {
                solar_wind: "Test wind".to_string(),
                geomagnetic: "Test geomagnetic".to_string(),
                aurora_forecast: "Test aurora".to_string(),
                best_viewing_hours: "22:00-23:00".to_string(),
            },
            golden_hour_output: GoldenHourOutput {
                sunrise_sunset: "03:44 | 21:16".to_string(),
                golden_hours: "04:00-06:00".to_string(),
                blue_hours: "03:30-04:00".to_string(),
                current_condition: "–î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è".to_string(),
            },
            tips_output: PhotographyTipsOutput {
                equipment_recommendations: vec!["Test equipment".to_string()],
                shooting_tips: vec!["Test tip".to_string()],
                location_suggestions: vec!["Test location".to_string()],
                technical_settings: vec!["Test setting".to_string()],
                general_recommendations: vec!["Test general".to_string()],
            },
        };
        let formatted = format_dashboard_output(&output);
        assert!(formatted.contains("–§–û–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –î–ê–®–ë–û–†–î"));
    }

    #[test]
    fn test_process_golden_hour_smoke() {
        let (_is_golden, output) = process_golden_hour(55.7558, 37.6176);
        assert!(output.sunrise_sunset.contains(":"));
        assert!(output.golden_hours.contains(":"));
        assert!(output.blue_hours.contains(":"));
        assert!(!output.current_condition.is_empty());
        // is_golden –º–æ–∂–µ—Ç –±—ã—Ç—å true –∏–ª–∏ false, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–Ω–∏–∫—É–µ—Ç
    }

    #[test]
    fn test_process_photography_tips_smoke() {
        let tips = process_photography_tips(8.0, true, 0.7);
        assert!(!tips.equipment_recommendations.is_empty());
        assert!(!tips.shooting_tips.is_empty());
        assert!(!tips.location_suggestions.is_empty());
        assert!(!tips.technical_settings.is_empty());
        assert!(!tips.general_recommendations.is_empty());
    }

    #[test]
    fn test_load_environment_variables_smoke() {
        // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        env::set_var("OPENWEATHER_API_KEY", "demo_key");
        env::set_var("CITY", "Moscow");
        env::set_var("LATITUDE", "55.7558");
        env::set_var("LONGITUDE", "37.6176");
        let (api_key, city, lat, lon) = load_environment_variables();
        assert_eq!(api_key, "demo_key");
        assert_eq!(city, "Moscow");
        assert_eq!(lat, 55.7558);
        assert_eq!(lon, 37.6176);
    }

    #[test]
    fn test_async_wrappers() {
        let rt = Runtime::new().unwrap();
        // process_weather_data
        let (weather_score, weather_output, astro_output) = rt
            .block_on(process_weather_data(
                "demo_key".to_string(),
                "Moscow".to_string(),
            ))
            .unwrap();
        assert!((0.0..=10.0).contains(&weather_score));
        assert!(!weather_output.current_weather.is_empty());
        assert!(!astro_output.recommendation.is_empty());

        // process_solar_data
        let (aurora_prob, solar_output) = rt.block_on(process_solar_data()).unwrap();
        assert!((0.0..=1.0).contains(&aurora_prob));
        assert!(!solar_output.solar_wind.is_empty());
    }

    #[test]
    fn test_generate_dashboard_output_smoke() {
        let rt = Runtime::new().unwrap();
        let output = rt
            .block_on(generate_dashboard_output(
                "demo_key".to_string(),
                "Moscow".to_string(),
                55.7558,
                37.6176,
            ))
            .unwrap();
        assert!(!output.summary.overall_recommendation.is_empty());
        assert!(!output.weather_output.current_weather.is_empty());
        assert!(!output.solar_output.solar_wind.is_empty());
        assert!(!output.golden_hour_output.sunrise_sunset.is_empty());
        // tips_output –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        let _ = &output.tips_output.equipment_recommendations;
        let _ = &output.tips_output.shooting_tips;
        let _ = &output.tips_output.location_suggestions;
        let _ = &output.tips_output.technical_settings;
        let _ = &output.tips_output.general_recommendations;
    }

    #[test]
    fn test_process_golden_hour_edge_coords() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ, –Ω–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        let (_is_golden, output) = process_golden_hour(90.0, 180.0);
        assert!(!output.sunrise_sunset.is_empty());
    }

    #[test]
    fn test_process_photography_tips_extremes() {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        let tips_min = process_photography_tips(0.0, false, 0.0);
        assert!(!tips_min.equipment_recommendations.is_empty());
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        let tips_max = process_photography_tips(10.0, true, 1.0);
        assert!(!tips_max.equipment_recommendations.is_empty());
        assert!(!tips_max.shooting_tips.is_empty());
        assert!(!tips_max.location_suggestions.is_empty());
        assert!(!tips_max.technical_settings.is_empty());
    }

    #[test]
    fn test_format_dashboard_output_empty_fields() {
        let output = DashboardOutput {
            summary: dashboard::DashboardSummary {
                overall_recommendation: String::new(),
                weather_score: 0.0,
                aurora_probability: 0.0,
                is_golden_hour_today: false,
                best_shooting_hours: vec![],
                key_highlights: vec![],
                warnings: vec![],
            },
            weather_output: WeatherOutput {
                current_weather: String::new(),
                temperature_range: String::new(),
                best_hours: String::new(),
                overall_score: 0.0,
                recommendation: String::new(),
                concerns: String::new(),
            },
            astrophotography_output: AstrophotographyOutput {
                is_suitable: false,
                avg_cloud_cover: 0.0,
                best_hours: String::new(),
                recommendation: String::new(),
            },
            solar_output: SolarOutput {
                solar_wind: String::new(),
                geomagnetic: String::new(),
                aurora_forecast: String::new(),
                best_viewing_hours: String::new(),
            },
            golden_hour_output: GoldenHourOutput {
                sunrise_sunset: String::new(),
                golden_hours: String::new(),
                blue_hours: String::new(),
                current_condition: String::new(),
            },
            tips_output: PhotographyTipsOutput {
                equipment_recommendations: vec![],
                shooting_tips: vec![],
                location_suggestions: vec![],
                technical_settings: vec![],
                general_recommendations: vec![],
            },
        };
        let formatted = format_dashboard_output(&output);
        assert!(formatted.contains("–§–û–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –î–ê–®–ë–û–†–î"));
    }

    #[test]
    fn test_validate_coordinates_edge_cases() {
        // –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        assert!(validate_coordinates(90.0, 180.0));
        assert!(validate_coordinates(-90.0, -180.0));
        assert!(!validate_coordinates(90.1, 0.0));
        assert!(!validate_coordinates(0.0, 180.1));
    }

    #[test]
    fn test_load_environment_variables_missing() {
        // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env::remove_var("OPENWEATHER_API_KEY");
        env::remove_var("CITY");
        env::remove_var("LATITUDE");
        env::remove_var("LONGITUDE");
        let (api_key, city, lat, lon) = load_environment_variables();
        assert_eq!(api_key, "demo_key");
        assert_eq!(city, "Moscow");
        assert_eq!(lat, 55.7558);
        assert_eq!(lon, 37.6176);
    }

    #[test]
    fn test_async_wrappers_empty_city() {
        let rt = Runtime::new().unwrap();
        // –ü—É—Å—Ç–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å, –Ω–æ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
        let result = rt.block_on(process_weather_data("demo_key".to_string(), "".to_string()));
        assert!(result.is_ok() || result.is_err());
    }

    #[test]
    fn test_generate_dashboard_output_edge_coords() {
        let rt = Runtime::new().unwrap();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ, –Ω–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        let result = rt.block_on(generate_dashboard_output(
            "demo_key".to_string(),
            "Moscow".to_string(),
            90.0,
            180.0,
        ));
        assert!(result.is_ok() || result.is_err());
    }
}
