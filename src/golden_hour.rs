use chrono::{DateTime, Datelike, Local};
use colored::*;
use sunrise::sunrise_sunset;

#[derive(Debug)]
pub struct GoldenHourInfo {
    pub sunrise: DateTime<Local>,
    pub sunset: DateTime<Local>,
    pub golden_hour_morning_start: DateTime<Local>,
    pub golden_hour_morning_end: DateTime<Local>,
    pub golden_hour_evening_start: DateTime<Local>,
    pub golden_hour_evening_end: DateTime<Local>,
    pub blue_hour_morning_start: DateTime<Local>,
    pub blue_hour_morning_end: DateTime<Local>,
    pub blue_hour_evening_start: DateTime<Local>,
    pub blue_hour_evening_end: DateTime<Local>,
}

pub struct GoldenHourService {
    latitude: f64,
    longitude: f64,
}

impl GoldenHourService {
    pub fn new(latitude: f64, longitude: f64) -> Self {
        Self {
            latitude,
            longitude,
        }
    }

    pub fn calculate_golden_hours(&self, date: DateTime<Local>) -> GoldenHourInfo {
        let (sunrise_timestamp, sunset_timestamp) = sunrise_sunset(
            self.latitude,
            self.longitude,
            date.year(),
            date.month() as u32,
            date.day() as u32,
        );

        let sunrise = DateTime::from_timestamp(sunrise_timestamp, 0)
            .unwrap()
            .with_timezone(&Local);
        let sunset = DateTime::from_timestamp(sunset_timestamp, 0)
            .unwrap()
            .with_timezone(&Local);

        // –ó–æ–ª–æ—Ç–æ–π —á–∞—Å —É—Ç—Ä–æ–º: –∑–∞ 1 —á–∞—Å –¥–æ –≤–æ—Å—Ö–æ–¥–∞ –∏ 1 —á–∞—Å –ø–æ—Å–ª–µ
        let golden_hour_morning_start = sunrise - chrono::Duration::hours(1);
        let golden_hour_morning_end = sunrise + chrono::Duration::hours(1);

        // –ó–æ–ª–æ—Ç–æ–π —á–∞—Å –≤–µ—á–µ—Ä–æ–º: –∑–∞ 1 —á–∞—Å –¥–æ –∑–∞–∫–∞—Ç–∞ –∏ 1 —á–∞—Å –ø–æ—Å–ª–µ
        let golden_hour_evening_start = sunset - chrono::Duration::hours(1);
        let golden_hour_evening_end = sunset + chrono::Duration::hours(1);

        // –°–∏–Ω–∏–π —á–∞—Å —É—Ç—Ä–æ–º: –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –≤–æ—Å—Ö–æ–¥–∞
        let blue_hour_morning_start = sunrise - chrono::Duration::minutes(30);
        let blue_hour_morning_end = sunrise;

        // –°–∏–Ω–∏–π —á–∞—Å –≤–µ—á–µ—Ä–æ–º: –∑–∞ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–∫–∞—Ç–∞
        let blue_hour_evening_start = sunset;
        let blue_hour_evening_end = sunset + chrono::Duration::minutes(30);

        GoldenHourInfo {
            sunrise,
            sunset,
            golden_hour_morning_start,
            golden_hour_morning_end,
            golden_hour_evening_start,
            golden_hour_evening_end,
            blue_hour_morning_start,
            blue_hour_morning_end,
            blue_hour_evening_start,
            blue_hour_evening_end,
        }
    }

    pub fn get_current_lighting_condition(&self, current_time: DateTime<Local>) -> String {
        let golden_hours = self.calculate_golden_hours(current_time);

        if current_time >= golden_hours.golden_hour_morning_start
            && current_time <= golden_hours.golden_hour_morning_end
        {
            "–ó–æ–ª–æ—Ç–æ–π —á–∞—Å (—É—Ç—Ä–æ)".to_string()
        } else if current_time >= golden_hours.golden_hour_evening_start
            && current_time <= golden_hours.golden_hour_evening_end
        {
            "–ó–æ–ª–æ—Ç–æ–π —á–∞—Å (–≤–µ—á–µ—Ä)".to_string()
        } else if current_time >= golden_hours.blue_hour_morning_start
            && current_time <= golden_hours.blue_hour_morning_end
        {
            "–°–∏–Ω–∏–π —á–∞—Å (—É—Ç—Ä–æ)".to_string()
        } else if current_time >= golden_hours.blue_hour_evening_start
            && current_time <= golden_hours.blue_hour_evening_end
        {
            "–°–∏–Ω–∏–π —á–∞—Å (–≤–µ—á–µ—Ä)".to_string()
        } else if current_time >= golden_hours.sunrise && current_time <= golden_hours.sunset {
            "–î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è".to_string()
        } else {
            "–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è".to_string()
        }
    }
}

pub fn print_golden_hour_info(info: &GoldenHourInfo) {
    println!("\n{}", "=== –ó–û–õ–û–¢–û–ô –ß–ê–° –ò –í–†–ï–ú–Ø –°–™–ï–ú–ö–ò ===".bold().yellow());

    println!(
        "\n{}: {}",
        "–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞".bold(),
        info.sunrise.format("%H:%M")
    );
    println!("{}: {}", "–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞".bold(), info.sunset.format("%H:%M"));

    println!("\n{}:", "–ó–æ–ª–æ—Ç–æ–π —á–∞—Å (—É—Ç—Ä–æ)".bold().yellow());
    println!(
        "  üåÖ {} - {}",
        info.golden_hour_morning_start.format("%H:%M"),
        info.golden_hour_morning_end.format("%H:%M")
    );

    println!("\n{}:", "–ó–æ–ª–æ—Ç–æ–π —á–∞—Å (–≤–µ—á–µ—Ä)".bold().yellow());
    println!(
        "  üåá {} - {}",
        info.golden_hour_evening_start.format("%H:%M"),
        info.golden_hour_evening_end.format("%H:%M")
    );

    println!("\n{}:", "–°–∏–Ω–∏–π —á–∞—Å (—É—Ç—Ä–æ)".bold().blue());
    println!(
        "  üåä {} - {}",
        info.blue_hour_morning_start.format("%H:%M"),
        info.blue_hour_morning_end.format("%H:%M")
    );

    println!("\n{}:", "–°–∏–Ω–∏–π —á–∞—Å (–≤–µ—á–µ—Ä)".bold().blue());
    println!(
        "  üåä {} - {}",
        info.blue_hour_evening_start.format("%H:%M"),
        info.blue_hour_evening_end.format("%H:%M")
    );

    println!("\n{}:", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤".bold().green());
    println!("  üì∏ –ó–æ–ª–æ—Ç–æ–π —á–∞—Å - –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –∏ –ø–µ–π–∑–∞–∂–µ–π");
    println!("  üì∏ –°–∏–Ω–∏–π —á–∞—Å - –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø–µ–π–∑–∞–∂–µ–π");
    println!("  üì∏ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å—ä–µ–º–∫—É –∑–∞—Ä–∞–Ω–µ–µ, —É—á–∏—Ç—ã–≤–∞—è –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞");
}
