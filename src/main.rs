mod dashboard;
mod golden_hour;
mod photography_tips;
mod solar;
mod weather;

use colored::*;
use dashboard::PhotographyDashboard;
use golden_hour::{print_golden_hour_info, GoldenHourService};
use log::{debug, error, info, warn};
use photography_tips::{print_photography_tips, PhotographyTipsService};
use solar::{predict_aurora, print_solar_data};
use std::env;
use weather::{print_astrophotography_analysis, print_weather_analysis, WeatherService};

/// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
fn load_environment_variables() -> (String, String, f64, f64) {
    let api_key = env::var("OPENWEATHER_API_KEY").unwrap_or_else(|_| {
        warn!("OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º demo_key");
        "demo_key".to_string()
    });

    let city = env::var("CITY").unwrap_or_else(|_| {
        info!("CITY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤–∞");
        "Moscow".to_string()
    });

    let latitude = env::var("LATITUDE")
        .unwrap_or_else(|_| "55.7558".to_string())
        .parse::<f64>()
        .unwrap_or(55.7558);

    let longitude = env::var("LONGITUDE")
        .unwrap_or_else(|_| "37.6176".to_string())
        .parse::<f64>()
        .unwrap_or(37.6176);

    (api_key, city, latitude, longitude)
}

/// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
fn validate_coordinates(latitude: f64, longitude: f64) -> bool {
    (-90.0..=90.0).contains(&latitude) && (-180.0..=180.0).contains(&longitude)
}

/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É
async fn process_weather_data(
    api_key: String,
    city: String,
) -> Result<f64, Box<dyn std::error::Error>> {
    let weather_service = WeatherService::new(api_key, city);
    let forecast = weather_service.get_weather_forecast().await?;

    debug!("–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã: {} –∑–∞–ø–∏—Å–µ–π", forecast.hourly.len());
    print_weather_analysis(&forecast);

    let analysis = weather::analyze_weather_for_photography(&forecast);
    let weather_score = analysis.overall_score;

    print_astrophotography_analysis(&forecast);

    Ok(weather_score)
}

/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–ª–Ω–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∏—è–Ω–∏–π
async fn process_solar_data() -> Result<f64, Box<dyn std::error::Error>> {
    print_solar_data().await?;
    debug!("–°–æ–ª–Ω–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã");

    let forecast = predict_aurora().await?;
    let aurora_probability = forecast.visibility_probability;

    debug!(
        "–ü–æ–ª—É—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π: {:.0}%",
        aurora_probability * 100.0
    );

    Ok(aurora_probability)
}

/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–æ–ª–æ—Ç–æ–π —á–∞—Å
fn process_golden_hour(latitude: f64, longitude: f64) -> bool {
    let golden_hour_service = GoldenHourService::new(latitude, longitude);
    print_golden_hour_info(&golden_hour_service);
    golden_hour_service.is_golden_hour()
}

/// –í—ã–≤–æ–¥–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
fn print_personalized_tips(weather_score: f64, is_golden_hour: bool, aurora_probability: f64) {
    let tips_service = PhotographyTipsService::new();
    let personalized_tips =
        tips_service.get_tips_for_weather(weather_score, is_golden_hour, aurora_probability);

    if !personalized_tips.equipment_recommendations.is_empty() {
        println!("\nüì∑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Æ:");
        print_photography_tips(&personalized_tips.equipment_recommendations);
    }

    if !personalized_tips.shooting_tips.is_empty() {
        println!("\nüéØ –°–û–í–ï–¢–´ –ü–û –°–™–ï–ú–ö–ï:");
        print_photography_tips(&personalized_tips.shooting_tips);
    }

    if !personalized_tips.location_suggestions.is_empty() {
        println!("\nüìç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –õ–û–ö–ê–¶–ò–Ø–ú:");
        print_photography_tips(&personalized_tips.location_suggestions);
    }

    if !personalized_tips.technical_settings.is_empty() {
        println!("\n‚öôÔ∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:");
        print_photography_tips(&personalized_tips.technical_settings);
    }

    println!("\n{}", "=== –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===".bold().blue());
    let general_tips = tips_service.get_general_recommendations();
    print_photography_tips(&general_tips);
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    env_logger::init();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
    dotenv::dotenv().ok();

    info!("üöÄ –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤...");
    debug!("–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    let (api_key, city, latitude, longitude) = load_environment_variables();

    if !validate_coordinates(latitude, longitude) {
        error!(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat={}, lon={}",
            latitude, longitude
        );
        return Err("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã".into());
    }

    debug!(
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –≥–æ—Ä–æ–¥={}, —à–∏—Ä–æ—Ç–∞={}, –¥–æ–ª–≥–æ—Ç–∞={}",
        city, latitude, longitude
    );

    // –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    let dashboard = PhotographyDashboard::new(api_key.clone(), city.clone(), latitude, longitude);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    match dashboard.generate_dashboard().await {
        Ok(summary) => {
            dashboard.print_dashboard(&summary);
        }
        Err(e) => {
            error!("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {}", e);
            return Err(e);
        }
    }

    println!("\n{}", "üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø".bold().cyan());

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏ –∑–æ–ª–æ—Ç–æ–º —á–∞—Å–µ
    let mut weather_score = 0.0;
    let mut aurora_probability = 0.0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã
    match process_weather_data(api_key.clone(), city.clone()).await {
        Ok(score) => {
            weather_score = score;
        }
        Err(e) => {
            error!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {}", e);
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã: {}", e);
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–ª–Ω–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    match process_solar_data().await {
        Ok(probability) => {
            aurora_probability = probability;
        }
        Err(e) => {
            warn!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π: {}", e);
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.0
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–æ–ª–æ—Ç–æ–π —á–∞—Å
    let is_golden_hour = process_golden_hour(latitude, longitude);

    println!("\n{}", "=== –°–û–í–ï–¢–´ –î–õ–Ø –§–û–¢–û–ì–†–ê–§–û–í ===".bold().green());

    // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    print_personalized_tips(weather_score, is_golden_hour, aurora_probability);

    info!("–î–∞—à–±–æ—Ä–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use chrono::Timelike;
    use std::env;

    #[test]
    fn test_load_environment_variables() {
        let (api_key, city, latitude, longitude) = load_environment_variables();

        assert!(!api_key.is_empty());
        assert!(!city.is_empty());
        assert!(validate_coordinates(latitude, longitude));
    }

    #[test]
    fn test_validate_coordinates() {
        // –í–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        assert!(validate_coordinates(55.7558, 37.6176));
        assert!(validate_coordinates(0.0, 0.0));
        assert!(validate_coordinates(90.0, 180.0));
        assert!(validate_coordinates(-90.0, -180.0));

        // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        assert!(!validate_coordinates(91.0, 37.6176)); // –®–∏—Ä–æ—Ç–∞ > 90
        assert!(!validate_coordinates(-91.0, 37.6176)); // –®–∏—Ä–æ—Ç–∞ < -90
        assert!(!validate_coordinates(55.7558, 181.0)); // –î–æ–ª–≥–æ—Ç–∞ > 180
        assert!(!validate_coordinates(55.7558, -181.0)); // –î–æ–ª–≥–æ—Ç–∞ < -180
    }

    #[test]
    fn test_coordinate_validation_edge_cases() {
        // –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        assert!(validate_coordinates(90.0, 180.0));
        assert!(validate_coordinates(-90.0, -180.0));
        assert!(validate_coordinates(0.0, 0.0));

        // –ó–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        assert!(!validate_coordinates(90.1, 180.0));
        assert!(!validate_coordinates(-90.1, -180.0));
        assert!(!validate_coordinates(0.0, 180.1));
        assert!(!validate_coordinates(0.0, -180.1));
    }

    #[test]
    fn test_service_initialization() {
        let golden_hour_service = GoldenHourService::new(55.7558, 37.6176);
        assert!((0..=23).contains(
            &golden_hour_service
                .calculate_golden_hours(chrono::Local::now())
                .sunrise
                .hour()
        ));

        let _tips_service = PhotographyTipsService::new();
        // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
    }

    #[test]
    fn test_tips_generation() {
        let tips_service = PhotographyTipsService::new();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        let tips_good = tips_service.get_tips_for_weather(8.0, true, 0.7);
        assert!(!tips_good.equipment_recommendations.is_empty());
        assert!(!tips_good.shooting_tips.is_empty());

        let tips_bad = tips_service.get_tips_for_weather(3.0, false, 0.1);
        assert!(!tips_bad.equipment_recommendations.is_empty());

        let general_tips = tips_service.get_general_recommendations();
        assert_eq!(general_tips.len(), 5);
    }

    #[test]
    fn test_golden_hour_calculation() {
        let service = GoldenHourService::new(55.7558, 37.6176);
        let current_time = chrono::Local::now();
        let info = service.calculate_golden_hours(current_time);

        assert!((0..=23).contains(&info.sunrise.hour()));
        assert!((0..=23).contains(&info.sunset.hour()));
        assert!(info.sunrise < info.sunset);
    }

    #[test]
    fn test_lighting_condition_detection() {
        let service = GoldenHourService::new(55.7558, 37.6176);
        let current_time = chrono::Local::now();
        let condition = service.get_current_lighting_condition(current_time);

        assert!(!condition.is_empty());
        assert!(condition.contains("—á–∞—Å") || condition.contains("–≤—Ä–µ–º—è"));
    }

    #[test]
    fn test_dashboard_creation() {
        let dashboard = PhotographyDashboard::new(
            "test_key".to_string(),
            "TestCity".to_string(),
            55.7558,
            37.6176,
        );
        assert!(true); // –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–ª—Å—è —É—Å–ø–µ—à–Ω–æ
    }

    #[test]
    fn test_weather_score_calculation() {
        let weather_score = 8.5;
        assert!((0.0..=10.0).contains(&weather_score));

        let weather_score2 = 3.2;
        assert!((0.0..=10.0).contains(&weather_score2));

        let weather_score3 = 0.0;
        assert!((0.0..=10.0).contains(&weather_score3));
    }

    #[test]
    fn test_aurora_probability_handling() {
        let aurora_probability = 0.8;
        assert!((0.0..=1.0).contains(&aurora_probability));

        let aurora_probability2 = 0.3;
        assert!((0.0..=1.0).contains(&aurora_probability2));

        let aurora_probability3 = 0.0;
        assert!((0.0..=1.0).contains(&aurora_probability3));
    }

    #[test]
    fn test_tips_output_validation() {
        let tips_service = PhotographyTipsService::new();
        let tips = tips_service.get_tips_for_weather(7.0, true, 0.6);

        assert!(
            !tips.equipment_recommendations.is_empty()
                || !tips.shooting_tips.is_empty()
                || !tips.location_suggestions.is_empty()
                || !tips.technical_settings.is_empty()
        );

        let general_tips = tips_service.get_general_recommendations();
        assert_eq!(general_tips.len(), 5);
        for tip in &general_tips {
            assert!(!tip.is_empty());
        }
    }

    #[test]
    fn test_golden_hour_detection_logic() {
        let service = GoldenHourService::new(55.7558, 37.6176);
        let is_golden_hour = service.is_golden_hour();
        assert!(is_golden_hour == true || is_golden_hour == false);
    }

    #[test]
    fn test_error_handling_simulation() {
        let weather_score = 0.0; // fallback value
        let aurora_probability = 0.0; // fallback value

        assert_eq!(weather_score, 0.0);
        assert_eq!(aurora_probability, 0.0);
    }

    #[test]
    fn test_process_golden_hour() {
        let is_golden_hour = process_golden_hour(55.7558, 37.6176);
        assert!(is_golden_hour == true || is_golden_hour == false);
    }

    #[test]
    fn test_print_personalized_tips() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print_personalized_tips(8.0, true, 0.7);
        print_personalized_tips(3.0, false, 0.1);
        print_personalized_tips(5.0, true, 0.0);
        assert!(true); // –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
    }
}
