mod dashboard;
mod golden_hour;
mod photography_tips;
mod solar;
mod weather;

use colored::*;
use dashboard::PhotographyDashboard;
use golden_hour::{print_golden_hour_info, GoldenHourService};
use log::{debug, error, info, warn};
use photography_tips::{print_photography_tips, PhotographyTipsService};
use solar::{predict_aurora, print_solar_data};
use std::env;
use weather::{print_astrophotography_analysis, print_weather_analysis, WeatherService};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    env_logger::init();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
    dotenv::dotenv().ok();

    info!("üöÄ –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤...");
    debug!("–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω");

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    let api_key = env::var("OPENWEATHER_API_KEY").unwrap_or_else(|_| {
        warn!("OPENWEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º demo_key");
        "demo_key".to_string()
    });

    let city = env::var("CITY").unwrap_or_else(|_| {
        info!("CITY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤–∞");
        "Moscow".to_string()
    });

    let latitude = env::var("LATITUDE")
        .unwrap_or_else(|_| "55.7558".to_string())
        .parse::<f64>()
        .unwrap_or(55.7558);

    let longitude = env::var("LONGITUDE")
        .unwrap_or_else(|_| "37.6176".to_string())
        .parse::<f64>()
        .unwrap_or(37.6176);

    debug!(
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –≥–æ—Ä–æ–¥={}, —à–∏—Ä–æ—Ç–∞={}, –¥–æ–ª–≥–æ—Ç–∞={}",
        city, latitude, longitude
    );

    // –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    let dashboard = PhotographyDashboard::new(api_key.clone(), city.clone(), latitude, longitude);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    match dashboard.generate_dashboard().await {
        Ok(summary) => {
            dashboard.print_dashboard(&summary);
        }
        Err(e) => {
            error!("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {}", e);
            return Err(e);
        }
    }

    println!("\n{}", "üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø".bold().cyan());

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏ –∑–æ–ª–æ—Ç–æ–º —á–∞—Å–µ
    let mut weather_score = 0.0;
    let mut aurora_probability = 0.0;

    // –ü–æ–≥–æ–¥–∞
    let weather_service = WeatherService::new(api_key, city);
    match weather_service.get_weather_forecast().await {
        Ok(forecast) => {
            debug!("–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã: {} –∑–∞–ø–∏—Å–µ–π", forecast.hourly.len());
            print_weather_analysis(&forecast);

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–≥–æ–¥—ã –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤
            let analysis = weather::analyze_weather_for_photography(&forecast);
            weather_score = analysis.overall_score;

            // –ê—Å—Ç—Ä–æ—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
            print_astrophotography_analysis(&forecast);
        }
        Err(e) => {
            error!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {}", e);
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã: {}", e);
        }
    }

    // –°–æ–ª–Ω–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∏—è–Ω–∏–π
    match print_solar_data().await {
        Ok(_) => debug!("–°–æ–ª–Ω–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã"),
        Err(e) => {
            error!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {}", e);
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {}", e);
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π
    match predict_aurora().await {
        Ok(forecast) => {
            aurora_probability = forecast.visibility_probability;
            debug!(
                "–ü–æ–ª—É—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π: {:.0}%",
                aurora_probability * 100.0
            );
        }
        Err(e) => {
            warn!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ–≤–µ—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π: {}", e);
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.0
        }
    }

    // –ó–æ–ª–æ—Ç–æ–π —á–∞—Å
    let golden_hour_service = GoldenHourService::new(latitude, longitude);
    print_golden_hour_info(&golden_hour_service);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ–π—á–∞—Å –ª–∏ –∑–æ–ª–æ—Ç–æ–π —á–∞—Å
    let is_golden_hour = golden_hour_service.is_golden_hour();

    println!("\n{}", "=== –°–û–í–ï–¢–´ –î–õ–Ø –§–û–¢–û–ì–†–ê–§–û–í ===".bold().green());

    // –°–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let tips_service = PhotographyTipsService::new();
    let personalized_tips =
        tips_service.get_tips_for_weather(weather_score, is_golden_hour, aurora_probability);

    // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    if !personalized_tips.equipment_recommendations.is_empty() {
        println!("\nüì∑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ë–û–†–£–î–û–í–ê–ù–ò–Æ:");
        print_photography_tips(&personalized_tips.equipment_recommendations);
    }

    if !personalized_tips.shooting_tips.is_empty() {
        println!("\nüéØ –°–û–í–ï–¢–´ –ü–û –°–™–ï–ú–ö–ï:");
        print_photography_tips(&personalized_tips.shooting_tips);
    }

    if !personalized_tips.location_suggestions.is_empty() {
        println!("\nüìç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –õ–û–ö–ê–¶–ò–Ø–ú:");
        print_photography_tips(&personalized_tips.location_suggestions);
    }

    if !personalized_tips.technical_settings.is_empty() {
        println!("\n‚öôÔ∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:");
        print_photography_tips(&personalized_tips.technical_settings);
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    println!("\n{}", "=== –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===".bold().blue());
    let general_tips = tips_service.get_general_recommendations();
    print_photography_tips(&general_tips);

    info!("–î–∞—à–±–æ—Ä–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    Ok(())
}
