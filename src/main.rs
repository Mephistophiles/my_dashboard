mod dashboard;
mod golden_hour;
mod photography_tips;
mod solar;
mod weather;

use colored::*;
use dashboard::PhotographyDashboard;
use golden_hour::{print_golden_hour_info, GoldenHourService};
use photography_tips::{print_photography_tips, PhotographyTipsService};
use solar::{print_aurora_forecast, SolarService};
use std::env;
use weather::{
    analyze_astrophotography_conditions, analyze_weather_for_photography,
    print_astrophotography_analysis, print_weather_analysis, WeatherService,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
    dotenv::dotenv().ok();

    println!("{}", "üöÄ –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤...".bold().blue());

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    let api_key = env::var("WEATHER_API_KEY").unwrap_or_else(|_| "demo_key".to_string());
    let city = env::var("CITY").unwrap_or_else(|_| "–ú–æ—Å–∫–≤–∞".to_string());
    let latitude = env::var("LATITUDE")
        .unwrap_or_else(|_| "55.7558".to_string())
        .parse::<f64>()
        .unwrap_or(55.7558);
    let longitude = env::var("LONGITUDE")
        .unwrap_or_else(|_| "37.6176".to_string())
        .parse::<f64>()
        .unwrap_or(37.6176);

    // –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    let dashboard = PhotographyDashboard::new(api_key.clone(), city.clone(), latitude, longitude);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    let summary = match dashboard.generate_dashboard().await {
        Ok(summary) => summary,
        Err(e) => {
            eprintln!("{}", "‚ùå –û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –î–ê–®–ë–û–†–î–ê".bold().red());
            eprintln!("–ü—Ä–∏—á–∏–Ω–∞: {}", e);
            eprintln!(
                "{}",
                "üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞".yellow()
            );
            return Err(e);
        }
    };

    // –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥
    dashboard.print_dashboard(&summary);

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
    println!("\n{}", "üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø".bold().cyan());

    // –ü–æ–≥–æ–¥–∞
    let weather_service = WeatherService::new(api_key.clone(), city.clone());
    let weather_forecast = match weather_service.get_weather_forecast().await {
        Ok(forecast) => forecast,
        Err(e) => {
            eprintln!("{}", "‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–ì–û–î–´".bold().red());
            eprintln!("–ü—Ä–∏—á–∏–Ω–∞: {}", e);
            eprintln!(
                "{}",
                "üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ demo_key".yellow()
            );
            return Err(e.into());
        }
    };
    let weather_analysis = analyze_weather_for_photography(&weather_forecast);
    print_weather_analysis(&weather_analysis, &weather_forecast);

    // –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∞—Å—Ç—Ä–æ—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    let astrophotography_analysis = analyze_astrophotography_conditions(&weather_forecast);
    print_astrophotography_analysis(&astrophotography_analysis, &weather_forecast);

    // –°–µ–≤–µ—Ä–Ω—ã–µ —Å–∏—è–Ω–∏—è
    let solar_service = SolarService::new();
    let solar_wind_data = match solar_service.get_solar_wind_data().await {
        Ok(data) => data,
        Err(e) => {
            eprintln!(
                "{}",
                "‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –°–û–õ–ù–ï–ß–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò"
                    .bold()
                    .red()
            );
            eprintln!("–ü—Ä–∏—á–∏–Ω–∞: {}", e);
            eprintln!(
                "{}",
                "üí° –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ".yellow()
            );
            return Err(e.into());
        }
    };
    let geomagnetic_data = match solar_service.get_geomagnetic_data().await {
        Ok(data) => data,
        Err(e) => {
            eprintln!("{}", "‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ì–ï–û–ú–ê–ì–ù–ò–¢–ù–´–• –î–ê–ù–ù–´–•".bold().red());
            eprintln!("–ü—Ä–∏—á–∏–Ω–∞: {}", e);
            eprintln!(
                "{}",
                "üí° –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ".yellow()
            );
            return Err(e.into());
        }
    };
    let aurora_forecast = solar_service.predict_aurora(&solar_wind_data, &geomagnetic_data);
    print_aurora_forecast(&aurora_forecast, &solar_wind_data, &geomagnetic_data);

    // –ó–æ–ª–æ—Ç–æ–π —á–∞—Å
    let golden_hour_service = GoldenHourService::new(latitude, longitude);
    let current_time = chrono::Local::now();
    let golden_hour_info = golden_hour_service.calculate_golden_hours(current_time);
    print_golden_hour_info(&golden_hour_info);

    // –°–æ–≤–µ—Ç—ã –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤
    let tips_service = PhotographyTipsService::new();
    let is_golden_hour = summary.is_golden_hour_today;
    let photography_tips = tips_service.get_tips_for_weather(
        summary.weather_score,
        is_golden_hour,
        summary.aurora_probability,
    );
    print_photography_tips(&photography_tips);

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    println!("\n{}", "=== –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===".bold().white());
    let general_recommendations = tips_service.get_general_recommendations();
    for (i, rec) in general_recommendations.iter().enumerate() {
        println!("  {}. {}", i + 1, rec);
    }

    // –ò—Ç–æ–≥
    println!("–ò—Ç–æ–≥: {}", summary.overall_recommendation);
    Ok(())
}
